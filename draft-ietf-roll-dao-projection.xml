<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<!--
[Roll] Transit vs. Target in P DAO

Hello Rahul,

Yes, this gets quite a lot of things to put together but in the end it is not so complicated if you have a picture to look at.
I’ll make some for the interim.

My to do’s on this draft for the next version:

- Create an initial format for FIO based in DetNet.
  -> Do you see any more field we’d like to see in there, e.g., the capability to inject a Track in another?




-->

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>
<?rfc authorship="yes"?>
<?rfc tocappendix="yes"?>
<rfc  xmlns:xi="http://www.w3.org/2001/XInclude" category="std" ipr='trust200902' tocInclude="true"  obsoletes="" updates="6550" consensus="true" submissionType="IETF" xml:lang="en" version="3" docName="draft-ietf-roll-dao-projection-14" >

<front>

   <title abbrev='DAO Projection'>Root initiated routing state in RPL</title>
   <author initials='P' surname='Thubert' fullname='Pascal Thubert' role='editor'>
      <organization abbrev='Cisco Systems'>Cisco Systems, Inc</organization>
      <address>
         <postal>
            <street>Building D</street>
            <street>45 Allee des Ormes - BP1200 </street>
            <city>Mougins - Sophia Antipolis</city>
            <code>06254</code>
          <country>France</country>
         </postal>
         <phone>+33 497 23 26 34</phone>
         <email>pthubert@cisco.com</email>
      </address>
   </author>

    <author fullname="Rahul Arvind Jadhav" initials="R.A." surname="Jadhav">
        <organization>Huawei Tech</organization>
        <address>
            <postal>
                <street>Kundalahalli Village, Whitefield,</street>
                <city>Bangalore</city>
                <region>Karnataka</region>
                <code>560037</code>
                <country>India</country>
            </postal>
            <phone>+91-080-49160700</phone>
            <email>rahul.ietf@gmail.com</email>
        </address>
    </author>

<author initials='M' surname='Gillmore' fullname='Matthew Gillmore'>
      <organization abbrev='Itron'>Itron, Inc</organization>
      <address>
         <postal>
            <street>Building D</street>
            <street>2111 N Molter Road</street>
            <city>Liberty Lake</city>
            <code>99019</code>
            <country>United States</country>
         </postal>
         <phone>+1.800.635.5461</phone>
         <email>matthew.gillmore@itron.com</email>
      </address>
   </author>

        <date/>

	<area>Routing</area>

	<workgroup>ROLL</workgroup>

        <abstract>
	  <t>
     This document updates RFC 6550 to enable a RPL Root to install and maintain Projected Routes within its DODAG, along a selected set of nodes that may or may not include self, for a chosen duration.
     This potentially enables routes
    that are more optimized or resilient than those obtained with the
    classical distributed operation of RPL, either in terms of the size of a
    Routing Header or in terms of path length, which impacts both the
    latency and the packet delivery ratio.
	  </t>
	</abstract>
    </front>

    <middle>

	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<section anchor='introduction'><name>Introduction</name>

	   <t> RPL, the <xref target='RFC6550'>
	 "Routing Protocol for Low Power and Lossy Networks"</xref> (LLNs),
    is a generic Distance Vector protocol that is well suited
    for application in a variety of low energy Internet of Things (IoT)
    networks.
    RPL forms Destination Oriented Directed Acyclic Graphs (DODAGs) in which
    the Root often acts as the Border Router to connect the RPL domain to the
    Internet. The Root is responsible to select the RPL Instance that is used
    to forward a packet coming from the Internet into the RPL domain and set
    the related RPL information in the packets. 6TiSCH uses RPL for its routing operations.
    </t>
    <t>

    The <xref target='I-D.ietf-6tisch-architecture'>
    "6TiSCH Architecture"</xref> also leverages the <xref target='RFC8655'>
    "Deterministic Networking Architecture"</xref> centralized model
    whereby the device resources and capabilities are exposed to an external
    controller which installs routing states into the network based on some
    objective functions that reside in that external entity.  With DetNet and
    6TiSCH, the component of the controller that is responsible of computing
    routes is called a Path Computation Element (<xref target='PCE'/>).
    </t>
    <t>
    Based on heuristics of usage, path length, and knowledge of device capacity
    and available resources such as battery levels and reservable buffers, the
    PCE with a global visibility on the system can compute direct Peer to Peer
    (P2P) routes that are optimized for the needs expressed by an objective function.
    This document specifies protocol extensions to RPL <xref target='RFC6550'/>
    that enable the Root of a main DODAG to install centrally-computed routes  inside the DODAG on behalf of a PCE.
    </t>
    <t>
    This specification expects that the main RPL Instance is operated in RPL
    Non-Storing Mode of Operation (MOP) to sustain the exchanges with the Root.
    In that Mode, the
    Root has enough information to build a basic DODAG topology based on
    parents and children, but lacks the knowledge of siblings. This document
    adds the capability for nodes to advertise sibling information in order to
    improve the topological awareness of the Root.
    </t>
    <t>
    As opposed to the classical RPL operations where routes are injected by the
    Target nodes, the protocol extensions enable the Root of a DODAG to project
    the routes that are needed onto the nodes where they should be installed.
    This specification uses the term Projected Route to refer to those routes.
    Projected Routes can be used to reduce the size of the source routing
    headers with loose source routing operations down the main RPL DODAG.
    Projected Routes can also be used to build transversal routes for route
    optimization and Traffic Engineering purposes, between nodes of the DODAG.
    </t>
    <t>
    A Projected Route may be installed in either Storing and Non-Storing Mode,
    potentially resulting in hybrid situations where the Mode of the Projected
    Route is different from that of the main RPL Instance.
    A Projected Route may be a stand-alone end-to-end path or a Segment in a more complex forwarding graph called a Track.
    </t>
    <t>
    The concept of a Track was introduced in the 6TiSCH architecture, as a
    potentially complex path with redundant forwarding solutions along the way.
    A node at the ingress of more than one Segment in a Track may use any
    combination of those Segments to forward a packet towards the Track Egress.
    </t>
    <t>
    The <xref target='I-D.pthubert-raw-architecture'>"Reliable and
    Available Wireless (RAW) Architecture/Framework"</xref> defines the Path Selection Engine (PSE) that adapts the use of the path redundancy within a Track to defeat the diverse causes of packet loss.
     </t>
    <t>
    The PSE is a dataplane extension of the PCE; it controls the forwarding
    operation of the packets within a Track, using Packet ARQ, Replication,
    Elimination, and Overhearing (PAREO) functions over the Track segments, to
    provide a dynamic balance between the reliability and availability
    requirements of the flows and the need to conserve energy and spectrum.
    </t>
    <t>
    The time scale at which the PCE (re)computes the Track can be long,
    using long-term statistical metrics to perform global optimizations at the
    scale of the whole network. Conversely, the PSE makes forwarding decisions
    at the time scale of one or a small collection of packets, based on a
    knowledge that is limited in scope to the Track itself, so it can be
    refreshed at a fast pace.
	 </t>
    <t>
    Projected Routes must be used with the parsimony to limit the amount of
    state that is installed in each device to fit within the device resources,
    and to maintain the amount of rerouted traffic within the capabilities of
    the transmission links. The methods used to learn the node capabilities and
    the resources that are available in the devices and in the network are out
    of scope for this document.
    </t>
    <t>
    This specification uses the RPL Root as a proxy to the PCE. The PCE may be
    collocated with the Root, or may reside in an external Controller.

     </t>
    <t>
    In that case, the PCE exchanges control messages with the Root over a
    Southbound API that is out of scope for this specification.
    The algorithm to compute the paths and the protocol used by an external PCE
    to obtain the topology of the network from the Root are also out of scope.
    </t>
    </section>

	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->

<section><name>Terminology</name>
<section anchor='bcp'><name>Requirements Language</name>
<t>

    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
    "OPTIONAL" in this document are to be interpreted as described in BCP 14
    <xref target='RFC2119'/><xref target='RFC8174'/> when, and only when, they
    appear in all capitals, as shown here.

</t>
</section>	<!-- end section "Requirements Language" -->



<section anchor='gloss'><name>Glossary</name>
    <t> This document often uses the following acronyms:
       </t><dl spacing='compact'>


       <dt>CMO:</dt><dd> Control Message Option</dd>
       <dt>DAO:</dt><dd> Destination Advertisement Object</dd>
       <dt>DAG:</dt><dd> Directed Acyclic Graph </dd>
       <dt>DODAG:</dt><dd> Destination-Oriented Directed Acyclic Graph; A DAG
       with only one vertex (i.e., node) that has no outgoing edge (i.e., link)
       </dd>
       <dt>LLN:</dt><dd> Low-Power and Lossy Network </dd>
       <dt>NMPR:</dt><dd> Non-Storing Mode Projected Route  </dd>
       <dt>MOP:</dt><dd> RPL Mode of Operation</dd>
       <dt>P-DAO:</dt><dd> Projected DAO </dd>
       <dt>PDR:</dt><dd> P-DAO Request </dd>
       <dt>RAN:</dt><dd> RPL-Aware Node (either a RPL Router or a RPL-Aware Leaf)</dd>
       <dt>RAL:</dt><dd> RPL-Aware Leaf </dd>
       <dt>RH:</dt><dd> Routing Header </dd>
       <dt>RPI:</dt><dd> RPL Packet Information </dd>
       <dt>RPO:</dt><dd> A Route Projection Option; it can be a VIO or an SRVIO.    </dd>
       <dt>RTO:</dt><dd> RPL Target Option</dd>
       <dt>RUL:</dt><dd> RPL-Unaware Leaf </dd>
       <dt>SIO:</dt><dd> RPL Sibling Information Option</dd>
       <dt>SRVIO:</dt><dd> A Source-Routed Via Information Option, used in Non-Storing Mode P-DAO messages.    </dd>
       <dt>SMPR:</dt><dd> Storing Mode Projected Route  </dd>
       <!--
       <dt>SubDAG:</dt><dd> A DODAG rooted at a node which is a child of that
       node and a subset of a larger DAG</dd> -->
       <dt>TIO:</dt><dd> RPL Transit Information Option</dd>
       <dt>VIO:</dt><dd> A Via Information Option, used in Storing Mode P-DAO messages.    </dd>
       </dl>

</section>	<!-- Glossary -->

<section anchor='new'><name>Other Terms</name>
    <t>
    <!-- Removed reference from routing and 6tisch here to keep it simple
	 This specification introduces the following terminology:-->
    </t><dl spacing='compact'>

    <dt>Projected Route:</dt><dd>
	A Projected Route is a path segment that is computed remotely, and installed and maintained by a RPL Root.</dd>
    <dt>Projected DAO:</dt><dd> A DAO message used to install a Projected Route. </dd>
    <dt>Track:</dt><dd>
    A complex path with redundant Segments to a destination.
    </dd>
    <dt>TrackID:</dt><dd>
    A RPL Local InstanceID with the 'D' bit set. The TrackID is associated with a IPv6 Address to the Track Egress Node.
    </dd>
    </dl>
</section>	<!-- end section "Other Terms" -->


  <section anchor='lo'><name>References</name>
    <t>
	In this document, readers will encounter terms and concepts
	that are discussed in the <xref target='RFC6550'>"Routing Protocol for Low Power and Lossy Networks"</xref> and
    <xref target='RFC7102'>"Terminology in Low power And Lossy Networks"</xref>.
    </t>
  </section>	<!-- end section "References" -->

</section>	<!-- end section "Terminology"



-->


    <section anchor='ext6550'><name>Updating RFC 6550</name>


   <t>
   Section 6 of <xref target='RFC6550'/> introduces the RPL Control Message
   Options (CMO), including the RPL Target Option (RTO) and Transit Information Option (TIO), which can be placed in RPL messages such as the Destination Advertisement Object (DAO).
   This specification extends the DAO message with the Projected DAO (P-DAO); a
   P-DAO message signals one or more Projected Route(s) using the new CMOs presented therein.
   </t>
  <t>
   A Projected Route can be an additional route of higher precedence within the main DODAG. In that case, it is installed with a P-DAO using the parameters of the main DODAG, typically a global RPLInstanceID and the DODAGID field
   elided as shown in Section 6.4.1. of <xref target='RFC6550'/>.
   </t>
  <t>
   A Projected Route can also be a Segment within a Track. A stand-alone Segment can be used as a Serial Track. Segments can also be combined to form a Complex Track. The Root uses a local RPL Instance rooted at the Track Egress to signal the Track. The local RPLInstanceID of the Track is called the TrackID, more in  <xref target='trkid'/>.
   A P-DAO message for a Track signals the IPv6 Address of the Track Egress in the DODAGID field of the DAO Base Object, and the TrackID in the RPLInstanceID field, as shown in  <xref target='p-dao-fmt'/>.
   </t>


<figure anchor='p-dao-fmt'><name>Projected DAO Format for a Track</name>
              <artwork align="center">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    TrackID    |K|D|   Flags   |   Reserved    | DAOSequence   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
+                                                               +
|                                                               |
+            IPv6 Address of the Track Egress                   +
|                                                               |
+                                                               +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Option(s)...
+-+-+-+-+-+-+-+-+
 </artwork>
</figure>

  <t>
   In RPL Non-Storing Mode, the TIO and RTO are combined in a DAO message to
   inform the DODAG Root of all the edges in the DODAG, which are formed by the
   directed parent-child relationships.
   Options may be factorized; multiple RTOs may be present to signal a collection of children that can be reached via the parent(s) indicated in the TIO(s) that follows the RTOs.
   This specification generalizes the case of a parent that can be used to reach a child with that of a whole Track through which both children and siblings of the Track Egress are reachable.
   </t>
  <t>
   New CMOs called the Route Projection Options (RPO) are introduced for use in
   P-DAO messages as a multihop alternative to the TIO. One RPO is the Via Information Option (VIO); the VIO installs a state at each hop along a Storing Mode Projected Route (SMPR). The other is the Source-Routed VIO (SRVIO); the SRVIO installs a source-routing state at the Segment ingress, which uses that state to encapsulate a packet with a  Routing Header (RH) along a Non-Storing Mode Projected Route (NMPR).
   </t>
   <t>
   Like in a DAO message, the RTOs can be factorized in a P-DAO, but the RPOs cannot.
   A P-DAO contains one or more RTOs that indicate the destinations that can be
   reached via the Track, and exactly one RPO that signals the sequence of nodes between the Track Ingress and the Track Egress, both included.
   In Non-Storing Mode, the Root sends the P-DAO to the Track Ingress where the source-routing state is stored. In Storing Mode, the P-DAO is sent to the Track Egress and forwarded along the Segment in the reverse direction, installing a Storing Mode state at each hop. In both cases the Track Ingress generates the P-DAO-ACK when the installation is successful.
   </t>
   <t>
   This specification adds another CMO called the Sibling Information Option (SIO) that is used by a RPL Aware Node (RAN) to advertise a selection of its candidate neighbors as siblings to the Root, more in <xref target='rplsib'/>. The sibling selection process is out of scope.
   </t>

   <t>
   Two new RPL Control Messages are also introduced, to enable a RAN
   to request the establishment of a Track between self as the Track Ingress
   Node and a Track Egress.
   The RAN makes its request by sending a new P-DAO Request (PDR) Message to
   the Root. The Root confirms with a new PDR-ACK message back to the requester
   RAN, see <xref target='pdaoreq'/> for more. A positive PDR-ACK indicates that
   the Track was built and that the Roots commits to maintain the Track for the
   negotiated lifetime.
   In the case of a complex Track, each Segment is maintained independently and
   asynchronously by the Root, with its own lifetime that may be shorter, the
   same, or longer than that of the Track. The Root may use an asynchronous
   PDR-ACK with an negative status to indicate that the Track was terminated before its time.
   </t>
  </section> <!-- Extending RFC 6550 -->



    <section anchor='rplccmo'><name>New RPL Control Messages and Options</name>

    <section anchor='pdaoreq'><name>New P-DAO Request Control Message</name>

               <t>
    The P-DAO Request (PDR) message is sent by a Node in the main DODAG to the Root. It is a request to establish or refresh a Track.
    Exactly one RTO MUST be present in a PDR. The RTO signals the Track Egress, more in
    <xref target='req'/>.
    <!--
    TODO: A P-DAO parameter option MAY be present as well to provide additional
    information on the requested path.
    -->
    </t>
    <t>
    The RPL Control Code for the PDR is 0x09, to be confirmed by IANA.
    The format of PDR Base Object is as follows:
    </t>

<figure anchor='disupdfmt'><name>New P-DAO Request Format</name>
              <artwork align="center">
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TrackID     |K|R|   Flags   |  ReqLifetime  | PDRSequence   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Option(s)...
 +-+-+-+-+-+-+-+-+
 </artwork>
</figure>

          <dl spacing='normal'>
              <dt>TrackID:</dt><dd>8-bit field indicating the RPLInstanceID
              associated with the Track. It is set to zero upon the
              first request for a new Track and then to the TrackID once the
              Track was created, to either renew it of destroy it.
              </dd>
              <dt>K:</dt><dd>The 'K' flag is set to indicate that the recipient
              is expected to send a PDR-ACK back.
              </dd>
              <dt>R:</dt><dd>The 'R' flag is set to request a Complex Track
              for redundancy.
              </dd>
              <dt>Flags:</dt><dd>Reserved. The Flags field MUST initialized to zero by the sender and MUST be ignored by the receiver
              </dd>
              <dt>ReqLifetime:</dt><dd> <t>8-bit unsigned integer.
              The requested lifetime for the Track expressed in Lifetime Units
              (obtained from the DODAG Configuration option).
              </t><t>
              A PDR with a fresher
              PDRSequence refreshes the lifetime, and a PDRLifetime of 0
              indicates that the track should be destroyed.
              </t>
              </dd>
              <dt>PDRSequence:</dt><dd>
              <t>8-bit wrapping sequence number,
              obeying the operation in section 7.2 of
              <xref target='RFC6550'/>.
              The PDRSequence is used to correlate a PDR-ACK message with the
              PDR message that triggered it. It is incremented at each PDR
              message and echoed in the PDR-ACK by the Root.
              </t>
              </dd>

            </dl>

    </section> <!-- New P-DAO Request Control Message -->

    <section anchor='rpldisackl'><name>New PDR-ACK Control Message</name>
    <t>
    The new PDR-ACK is sent as a response to a PDR message with the 'K' flag
    set.
    The RPL Control Code for the PDR-ACK is 0x0A, to be confirmed by IANA.
    Its format is as follows:
    </t>

<figure anchor='disackfmt'><name>New PDR-ACK Control Message Format</name>
              <artwork align="center">

 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    TrackID    |     Flags     | Track Lifetime|  PDRSequence  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| PDR-ACK Status|                Reserved                       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Option(s)...
+-+-+-+-+-+-+-+
 </artwork>
</figure>

          <dl spacing='normal'>
              <dt>TrackID:</dt><dd>
             The RPLInstanceID of the Track that was created. The value of 0x00 is used to when no Track was created.
              </dd>

              <dt>Flags:</dt><dd>Reserved. The Flags field MUST initialized to zero by the sender and MUST be ignored by the receiver
              </dd>

              <dt>Track Lifetime:</dt><dd>
             Indicates that remaining Lifetime for the Track, expressed in
             Lifetime Units; the value of zero (0x00)
              indicates that the Track was destroyed or not created.
              </dd>

              <dt>PDRSequence:</dt><dd> 8-bit wrapping sequence number.
              It is incremented at each PDR message and echoed in the PDR-ACK.
              </dd>


              <dt>PDR-ACK Status:</dt><dd> <t>8-bit field indicating
            the completion.
            The PDR-ACK Status is substructured as indicated in <xref target='rpst'/>:</t>



 <figure anchor='rpst' suppress-title='false'><name>PDR-ACK status Format</name>
       <artwork align="center" name="" type="" alt="">
    0 1 2 3 4 5 6 7
   +-+-+-+-+-+-+-+-+
   |E|R|  Value    |
   +-+-+-+-+-+-+-+-+
</artwork>
 </figure>


    <dl  spacing='compact'>
	<dt>E:</dt><dd> 1-bit flag. Set to indicate a rejection. When not set, the value of 0
    indicates Success/Unqualified acceptance and other values indicate "not an
    outright rejection".</dd>
	<dt>R:</dt><dd> 1-bit flag. Reserved, MUST be set to 0 by the sender and
    ignored by the receiver.</dd>
	<dt>Status Value:</dt><dd> 6-bit unsigned integer. Values depending on the
    setting of the 'E' flag, see
    <xref target='iana-ack-status'/> and <xref target='iana-nack-status'/>.
    </dd>

	</dl>

    </dd>

    <dt>Reserved:</dt><dd>The Reserved field MUST initialized to zero by the
    sender and MUST be ignored by the receiver
    </dd>

	</dl>

    </section> <!-- New PDR-ACK Control Message -->


     <section anchor='rplrpo'><name>Route Projection Options</name>

    <t>An RPO signals the ordered list of IPv6 Via Addresses that constitutes the hops of either a Serial Track or a Segment of a more Complex Track.
    An RPO MUST contain at least one Via Address, and a Via Address MUST NOT be
    present more than once, otherwise the RPO MUST be ignored.
    The format of the RPOs is as follows:
    </t>
<figure anchor='viao'><name>Route Projection Option format (uncompressed form)</name>
              <artwork align="center">
     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |   Type        | Option Length |     Flags     |   SegmentID   |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |Segm. Sequence | Seg. Lifetime |      SRH-6LoRH header         |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    +                                                               +
    .                                                               .
    .                     Via Address 1                             .
    .                                                               .
    +                                                               +
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    .                              ....                             .
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    +                                                               +
    .                                                               .
    .                     Via Address n                             .
    .                                                               .
    +                                                               +
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 </artwork>
</figure>

          <dl spacing='normal'>
              <dt>Option Type:</dt><dd>0x0B for VIO, 0x0C for SRVIO
                                     (to be confirmed by IANA)</dd>

              <dt>Option Length:</dt><dd>In bytes; variable, depending on the number of Via Addresses and the compression.</dd>


              <dt>SegmentID:</dt><dd>8-bit field that identifies a Segment
               within a Track or the main DODAG as indicated by the TrackID field. The value of 0 is used to signal a Serial Track, i.e., made of a single segment.
              </dd>


              <dt>Segment Sequence:</dt><dd>
              <t>8-bit unsigned integer.
              The Segment Sequence obeys the operation in section 7.2 of
              <xref target='RFC6550'/> and the lollipop starts at 255.
              </t><t>
              When the
              Root of the DODAG needs to refresh or update a Segment in a Track,
              it increments the Segment Sequence individually for that Segment.
              </t><t>
              The Segment information indicated in the RPO deprecates any state
              for the Segment indicated by the SegmentID within the indicated
              Track and sets up the new information.

              </t><t>
              An RPO with a Segment
              Sequence that is not as fresh as the current one is ignored.
              </t><t>
              An RPO for a given Track Egress with the same (TrackID,
              SegmentID, Segment Sequence) indicates a retry; it MUST NOT
              change the Segment and MUST be propagated or answered as the first
              copy.
              </t>
              </dd>


              <dt>Segment Lifetime:</dt><dd>
              <t>8-bit unsigned integer. The length
              of time in Lifetime Units (obtained from the Configuration
              option) that the Segment is usable.

              </t><t>
              The
              period starts when a new Segment Sequence is seen. The value of 255
              (0xFF) represents infinity. The value of zero (0x00)
              indicates a loss of reachability.

              </t><t>
              A P-DAO message that
              contains a Via Information option with a Segment Lifetime of
              zero for a Track Egress is referred as a No-Path (for that Track Egress) in this document.
              </t>
              </dd>


              <dt>SRH-6LoRH header:</dt><dd>The first 2 bytes of the (first) SRH-6LoRH as shown in Figure 6 of <xref target='RFC8138'/>.
              A 6LoRH Type of 4 means that the VIA Addresses are provided in full with no compression.
              </dd>

              <dt>Via Address:</dt><dd>
              <t>An IPv6 addresse along the Segment.
              </t><t>
              In a VIO, the list is a strict path between direct neighbors, whereas for an SRVIO, the list may be loose, provided that each
              listed node has a path to the next listed node, e.g., via another
              Track.
              </t><t>
              In the case of a SMPR, or if <xref target='RFC8138'/> is not used in the data packets, then the Root MUST use
              only one SRH-6LoRH per RPO, and the compression is the same for
              all the addresses, as shown in <xref target='viao'/>.
              </t><t>
              In case of a NMPR, and if <xref target='RFC8138'/> is in use in the main DODAG, then the Root SHOULD optimize the size of the SRVIO; more than one SRH-6LoRH may be present, e.g., if the compression level changes inside the Segment and different SRH-6LoRH Types are required.

              </t>
              </dd>
            </dl>
    </section> <!-- Route Projection Options -->
    <section anchor='rplsib'><name>Sibling Information Option</name>

    <t>
    The Sibling Information Option (SIO) provides indication on siblings that
    could be used by the Root to form Projected Routes. One or more SIO(s) may be placed in the DAO messages that are sent to the Root in Non-Storing Mode.
    </t>
    <t>
    The format of the SIO is as follows:
    </t>
<figure anchor='siof'><name>Sibling Information Option Format</name>
              <artwork align="center">
     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |   Type        | Option Length |Comp.|B|D|Flags|    Opaque     |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |            Step of Rank       |          Reserved             |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    +                                                               +
    .                                                               .
    .         Sibling DODAGID (if 'D' flag not set)                 .
    .                                                               .
    +                                                               +
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    +                                                               +
    .                                                               .
    .                     Sibling Address                           .
    .                                                               .
    +                                                               +
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 </artwork>
</figure>

          <dl spacing='normal'>
              <dt>Option Type:</dt><dd>0x0D (to be confirmed by IANA)</dd>

              <dt>Option Length:</dt><dd>In bytes, the size of the option.</dd>

              <dt>Compression Type:</dt><dd>3-bit unsigned integer. This is the
              SRH-6LoRH Type as defined in figure 7 in section 5.1 of
              <xref target='RFC8138'/> that corresponds to the compression used
              for the Sibling Address and its DODAGID if resent. The Compression
              refernce is the Root of the main DODAG.
              </dd>
              <dt>Reserved for Flags:</dt><dd>MUST be set to zero by the sender
              and MUST be ignored by the receiver.
              </dd>
              <dt>B:</dt><dd>
              1-bit flag that is set to indicate that the connectivity to the sibling
              is bidirectional and roughly symmetrical. In that case, only one of the siblings may
              report the SIO for the hop. If 'B' is not set then the SIO only indicates connectivity
              from the sibling to this node, and does not provide information on the hop from this node
              to the sibling.

              </dd>
              <dt>D:</dt><dd>
              1-bit flag that is set to indicate that sibling belongs to the
              same DODAG. When not set, the Sibling DODAGID is indicated.

              </dd>

              <dt>Flags:</dt><dd>Reserved. The Flags field MUST initialized to zero by the sender and MUST be ignored by the receiver
              </dd>
              <dt>Opaque:</dt><dd>MAY be used to carry information that the node
              and the Root understand, e.g., a particular representation of the
              Link properties such as a proprietary Link Quality Information
              for packets received from the sibling. An industrial Alliance
              that uses RPL for a particular use / environment MAY redefine the
              use of this field to fit its needs.
              </dd>

              <dt>Step of Rank:</dt><dd>16-bit unsigned integer. This is the
              Step of Rank <xref target='RFC6550'/> as computed by the Objective
              Function between this node and the sibling.
              </dd>

              <dt>Reserved:</dt><dd>The Reserved field MUST initialized to zero by the sender and MUST be ignored by the receiver
              </dd>

              <dt>Sibling DODAGID:</dt><dd>2 to 16 bytes, the DODAGID of the
              sibling in a <xref target='RFC8138'/> compressed form as indicated
              by the Compression Type field. This field is present when the
              'D' flag is not set.
              </dd>
              <dt>Sibling Address:</dt><dd>2 to 16 bytes, the IPv6 Address of the
              sibling in a <xref target='RFC8138'/> compressed form as indicated
              by the Compression Type field.
              </dd>
            </dl>               <t>
    An SIO MAY be immediately followed by a DAG Metric Container. In that case
    the DAG Metric Container provides additional metrics for the hop from the Sibling
    to this node.
    </t>
    </section> <!-- Sibling Information Option -->




    </section> <!-- New RPL Control Messages and Options -->

    <section anchor='pdao'><name>Projected DAO</name>

    <t>
    This draft adds a capability to RPL whereby the Root of a DODAG projects a
    Track by sending one or more Projected-DAO (P-DAO) messages
    to selected routers in the DODAG. The P-DAO signals a collection of Targets in the RPL Target Option(s) (RTO). Those Targets can be reached via a sequence of routers indicated in a Route Projection Option (RPO).
    A P-DAO message MUST contain exactly one RPO, which is either a VIO or an
    SRVIO, and MUST follow one or more RTOs. There can be at most one such sequence of RTO(s) and an RPO.
     </t> <t>
    A P-DAO MUST be sent from the address of the Root that serves as DODAGID for the main DODAG. It MUST be sent to a GUA or a ULA of either the ingress or the egress of the Segment, more below. If the 'K' Flag is present in the P-DAO, and unless the P-DAO does not reach it, the ingress of the Segment is the node that acknowledges the message, using a DAO-ACK that MUST be sent back to the address that serves as DODAGID for the main DODAG.
     </t> <t>
    Like a classical DAO message, a P-DAO causes a change of state only if it is
    "new" per section 9.2.2. "Generation of DAO Messages" of the <xref target='RFC6550'>
    RPL specification</xref>; this is determined using
    the Segment Sequence information from the RPO as opposed to the Path
    Sequence from a TIO. Also, a Segment Lifetime of 0 in an RPO indicates that the projected route associated to the Segment is to be removed.
     </t> <t>
    There are two kinds of operation for the Projected Routes, the Storing Mode
    and the Non-Storing Mode.
    </t><ul spacing='normal'>
     <li>
    The Non-Storing Mode is discussed in <xref target='nspdao'/>. A Non-Storing
    Mode P-DAO carries an SRVIO with the loose list of Via Addresses that forms a
    source-routed Segment to the Track Egress. The recipient of the P-DAO is the
    ingress router of the source-routed Segment. The ingress router MUST install a source-routed state to the Track Egress and reply to the Root directly using a DAO-ACK message if requested to.
     </li>
    <li>
    The Storing Mode is discussed in <xref target='spdao'/>.  A Storing Mode
    P-DAO carries a VIO with the strict list of Via Addresses from the ingress to the egress of the Segment in the data path order.
    The routers listed in the Via Addresses, except the egress, MUST install a routing state to the Target(s) via the next Via Address in the VIO.
    In normal operations, the P-DAO is propagated along the chain of Via Routers
    from the egress router of the path till the ingress one, which confirms the
    installation to the Root with a DAO-ACK message.
    Note that the Root may be the ingress and it may be the egress of the
    Segment, that it can also be neither but it cannot be both.
     </li>
     </ul>
    <t>In case of a forwarding error along a Projected Route, an ICMP error is
    sent to the Root with a new Code "Error in Projected Route"
    (See <xref target='ICMPv6ErrPRoute'/>).
    The Root can then modify or remove the Projected Route.
    The "Error in Projected Route" message has the same format as the
    "Destination Unreachable Message", as specified in RFC 4443
    <xref target='RFC4443'/>.
       </t> <t>
    The portion of the invoking packet that is sent back in the ICMP message
    SHOULD record at least up to the RH if one is present, and this hop of the
    RH SHOULD be consumed by this node so that the destination in
    the IPv6 header is the next hop that this node could not reach.
    if a 6LoWPAN Routing Header (6LoRH) <xref target='RFC8138'/> is used to
    carry the IPv6 routing information in the outer header then that whole
    6LoRH information SHOULD be present in the ICMP message.
       </t> <t>
    The sender and exact operation depend on the Mode and is described in
    <xref target='nspdao'/> and <xref target='spdao'/> respectively.
    </t>
    <!--t>
    Note: The Target of a route that is installed by a P-DAO is not necessarily
    inside the DODAG, though how the Root and the optional PCE obtain the
    additional topological information to compute other routes is out of scope
    for this document.
    </t-->

      <section anchor='req'><name>Requesting a Track</name>

      <t>
      A Node is free to ask the Root for a new Track at any time. This is done with a PDR message, that indicates in the Requested Lifetime field the duration for which the Track should be established. Upon a PDR, the Root MAY install the necessary Segments, in which case it answers with a PDR-ACK indicating the granted Track Lifetime.
      All the Segments MUST be of a same mode, either Storing or Non-Storing.
      All the Segments MUST be created with the same TrackID and the same Track
      Egress signaled in the P-DAO.
      </t>
      <t>
      The Root is free to design the Track as it wishes, and to change the Segments overtime to serve the Track as needed, without notifying the
      resquesting Node.
      The Segment Lifetime in the P-DAO messages does not need to be aligned to
      the Requested Lifetime in the PDR, or between P-DAO messages for different Segments. The Root may use shorter lifetimes for the Segments
      and renew them faster than the Track is, or longer lifetimes in which case it will need to tear down the Segments if the Track is not renewed.
      </t>
      <t>
      When the Track Lifetime that was returned in the PDR-ACK is close to elapse, the resquesting Node needs to resend a PDR using the TrackID in the PDR-ACK to extend the lifetime of the Track, else the Track will time out and the Root will tear down the whole structure.
      </t>
      <t>
      If the Track fails and cannot be restored, the
      Root notifies the resquesting Node asynchronously with a PDR-ACK
      with a Track Lifetime of 0, indicating that the Track has failed, and
      a PDR-ACK Status indicating the reason of the fault.
      </t>
      </section><!-- Requesting a Track  -->


     <section anchor='trkid'><name>Identifying a Track</name>

     <t>
     RPL defines the concept of an Instance to signal an individual
     routing topology but does not have a concept of an administrative
     distance, which exists in certain proprietary implementations to sort out
     conflicts between multiple sources of routing information within one
     routing topology.
     </t>
     <t>
     This draft leverages the RPL Instance model as follows:
     </t><ul spacing='normal'>
     <li>
     <t>
     The Root MAY use P-DAO messages to add better routes in the main (Global)
     Instance in conformance with the routing objectives in that Instance.
     To achieve this, the Root MAY install an SMPR along a path down the main Non-Storing Mode DODAG. This enables a loose source routing and reduces the size of the Routing Header, see <xref target='loose'/>.
     </t>
     <t>
     When adding an SMPR to the main RPL Instance, the Root MUST set the RPLInstanceID field of the P-DAO message (see section 6.4.1. of <xref target='RFC6550'/>) to the RPLInstanceID of the main DODAG, and MUST NOT use the DODAGID field. A Projected Route provides a longer match to the Target Address than the default route via the Root, so it is preferred.
     </t>
     <t>
     Once the Projected Route is installed, the intermediate nodes listed in the VIO after first one (i.e. The ingress) can be elided from the RH in packets sent along the Segment signaled in the P-DAO. The resulting loose source routing header indicates (one of) the Target(s) as the next entry after the ingress.

     </t>
     </li>
     <li>
     <t>
     The Root MAY also use P-DAO messages to install a specific (say, Traffic Engineered) path as a Serial or as a Complex Track, to a particular endpoint that is the Track Egress. In that case, the Root MUST install a Local RPL Instance (see section 5 of <xref target='RFC6550'/>).
     </t>
     <t>
     In a that case, the TrackID MUST be unique for the Global Unique IPv6 Address (GUA) or Unique-Local Address (ULA) of the Track Egress that serves as DODAGID for the Track. This way, a Track is uniquely identified by the tuple (Track Egress Address, TrackID) where the TrackID is always represented with the 'D' flag set.
     </t>
     <t>
     The Track Egress Address and the TrackID MUST be signaled in the P-DAO message as shown in <xref target='p-dao-fmt'/>.
     </t>

     </li>


     </ul>
     </section><!-- Identifying a Track -->

     <section anchor='routing'><name>Forwarding Along a Track</name>
     <t>
     Sending a Packet within a RPL Local Instance requires the presence of an RPL Packet Information (RPI) (see <xref target='I-D.ietf-roll-useofrplinfo'/>) in the outer IPv6 Header chain. The RPI carries a local RPLInstanceID which, in association with the IPv6 final destination, indicates the RPL Instance that the packet follows.
     </t>
     <t>
     This draft leverages the RPL Forwarding model follows:
     </t><ul spacing='normal'>
     <li>
      <t>
     The RPI carries a local RPLInstanceID called the TrackID, which, in association with the IPv6 final destination, indicates the Track along which the packet is forwarded.
     The 'D' flag in the RPLInstanceID MUST be set to indicate that the final destination address in the IPv6 header owns the local RPLInstanceID, more
     in <xref target='routing'/>.
      </t>
     <t>
     In the data packets, the Track Egress Address and the TrackID MUST be respectively signaled as the IPv6 Address of the final destination and the RPLInstanceID field of the RPI that MUST be placed in the outer chain of IPv6 Headers.

     </t>


     <t>
     In case of a NMPR, the outer chain of IPv6 Headers contains an IPv6 RH as well. If it is not fully consumed, then the final destination is the last entry in the RH; else it is the Destination Address in the IPv6 Header. When using the <xref target='RFC8138'/> compression, it is the last
     hop of the last SRH-6LoRH of the outer header in either case.
     </t>




     </li>
     <li>
      <t>
      If the Track Ingress is the originator of the packet and the Track Egress
      is the destination of the packet, there is no need for an encapsulation.
      Else, i.e., if the Track Ingress is forwarding
      a packet into the Track, or if the the final destination is reached over the Track via the Track Egress but is located beyond it, then an IP-in-IP encapsulation is needed.
      </t>
     <t>
     A packet that is being routed over the RPL Instance associated to a first  Non-Storing Mode Track MAY be placed (encapsulated) in a second Track to cover one loose hop of the first Track.
     On the other hand, a Storing Mode Track must be strict and a packet that
     it placed in a Storing Mode Track MUST follow that Track till the Track Egress.
     </t>
     <t>
      When a Track Egress extracts a packet from a Track (decapsulates the packet), the Destination of the inner packet MUST be either this node or a direct neighbor, or a Target of another Segment of the same Track for which this node is ingress, otherwise the packet MUST be dropped.

     </t>
     <!-- TODO: add config parm to the local Instance -->
     </li>
     </ul>
    <t>
     All properties of a Track operations are inherited form the main RPL Instance
     that is used to install the Track. For instance, the use of compression per
     <xref target='RFC8138'/> is determined by whether it is used in the main
     instance, e.g., by setting the "T" flag
     <xref target='I-D.ietf-roll-turnon-rfc8138'/> in the RPL
     configuration option.
   </t>
    </section><!-- Forwarding along a Track -->


    <section anchor='nspdao'><name>Non-Storing Mode Projected Route</name>

    <t>
    As illustrated in <xref target='nsdf'/>, a P-DAO that carries an SRVIO
    enables the Root to install a source-routed path towards a Track Egress in any particular router.
    </t>

          <figure anchor='nsdf'><name>Projecting a Non-Storing Route</name>
            <artwork>
           ------+---------
                 |          Internet
                 |
              +-----+
              |     | Border Router
              |     |  (RPL Root)
              +-----+                    |  P  ^ ACK
                 |        Track          | DAO |
           o    o   o  o  Ingress X      V     |   X
       o o   o  o   o  o     o   X   o             X Source
      o  o o  o o    o   o  o    X  o  o           X Routed
      o   o    °  o     o   o   o X     o          X Segment
     o  o   o  o   o  o    o  o     X Track        X
        o  o  o  o             o     Egress

       o       o               o    o
     o          o             o     o
                                   destination

                       LLN
                       </artwork>
          </figure>
    <t>
    A route indicated by an SRVIO may be loose, meaning that the node that owns
    the next listed Via Address is not necessarily a neighbor. Without proper
    loop avoidance mechanisms, the interaction of loose source routing and other
    mechanisms may effectively cause loops.

    </t>
    <t>
      When forwarding a packet to a destination for which the router determines
      that routing happens via the Track Egress, the router inserts the source
      routing header in the packet with the destination set to the Track Egress.

    </t>
    <t>
      In order to signal the Segment, the router encapsulates the
      packet with an IP-in-IP header and a Routing Header as follows:
    </t>
    <ul>
    <li>
      In the uncompressed form the source of the packet is this router, the
      destination is the first Via Address in the SRVIO, and the RH is a
      Source Routing Header (SRH) <xref target='RFC6554'/> that contains the
      list of the remaining Via Addresses terminating by the Track Egress.
    </li>
    <li>
    <t>
    The preferred alternate in a network where 6LoWPAN Header Compression
    <xref target='RFC6282'/> is used is to leverage <xref target='RFC8025'>
    "IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Paging
    Dispatch"</xref> to compress the RPL artifacts as indicated in
    <xref target='RFC8138'/>.
    </t>
    <t>
    In that case, the source routed header is the exact copy of the (chain of) SRH-6LoRH found in the SRVIO, also terminating by the Track Egress.
    The RPI-6LoRH is appended next, followed by an IP-in-IP 6LoRH Header  that indicates the Ingress Router in the Encapsulator Address field, see as a similar case Figure 20 of <xref target='I-D.ietf-roll-turnon-rfc8138'/>.

    </t>
    </li>
    </ul>
    <t>
      In the case of a loose source-routed path, there MUST be either a neighbor
      that is adjacent to the
      loose next hop, on which case the packet is forwarded to that neighbor, or
      another Track to the loose next hop for which this node is Ingress; in the latter case, another encapsulation takes place and the process possibly recurses; otherwise the packet is dropped.
     </t>
      <t>In case of a forwarding error along a Source Route path, the node that
      fails to forward SHOULD send an ICMP error with a code "Error in Source
      Routing Header" back to the source of the packet, as described in section
      11.2.2.3. of <xref target='RFC6550'/>. Upon this message, the
      encapsulating node SHOULD stop using the source route path for a period
      of time and it SHOULD send an ICMP message with a Code "Error in
      Projected Route" to the Root. Failure to follow these steps may result
      in packet loss and wasted resources along the source route path that
      is broken.
      </t>
      </section>



    <section anchor='spdao'><name>Storing Mode Projected Route</name>

    <t>
    As illustrated in <xref target='sdf'/>, a P-DAO that carries a VIO
    enables the Root to install a stateful route towards a collection of Targets along a Segment between a Track Ingress and a Track Egress.
    </t>

      <figure anchor='sdf'><name>Projecting a route</name>
        <artwork>
        ------+---------
              |          Internet
              |
           +-----+
           |     | Border Router
           |     |  (RPL Root)
           +-----+                      |     ^                   |
              |                         | DAO | ACK               |
        o    o   o    o                 |     |                   |
    o o   o  o   o  o  o o   o          |  ^       | Projected    .
   o  o o  o o    o   o   o  o  o       |  | DAO   | Route        .
   o   o    o  o     o  o    o  o  o    | ^        |              .
  o  o   o  o   o         o   o o       v | DAO    v              .
  o          o   LLN   o   o     o                                |
      o o   o        o     o              Loose Source Route Path |
   o       o      o    o                 From Root To Destination v
    </artwork>
         </figure>


    <t>
     In order to install the relevant routing state along the Segment ,
     the Root sends a unicast P-DAO message to the Track Egress router of the routing Segment that is being installed. The P-DAO message contains a VIO with the direct sequence of Via Addresses. The VIO follows
     one or more RTOs indicating the Targets to which the Track leads. The VIO contains a Segment Lifetime for which the state is to be maintained.
     </t><t>
     The Root sends the P-DAO directly to the egress node of the Segment.
     In that P-DAO, the destination IP address matches the last Via Address in the VIO. This is how the egress recognizes its role. In a similar fashion,
     the ingress node recognizes its role as it matches first Via Address in the VIO.
     </t><t>

     The Egress node of the Segment is the only node in the path that does not
     install a route in response to the P-DAO; it is expected to be already able
     to route to the Target(s) on its own.
     If one of the Targets is not known, the node MUST answer to the Root
     with a negative DAO-ACK listing the Target(s) that could not be located
     (suggested status 10 to be confirmed by IANA).
    </t><t>
     If the egress node can reach all the Targets, then it forwards the P-DAO
     with unchanged content to its loose predecessor in the Segment as indicated
     in the list of Via Information options, and recursively the message is propagated
     unchanged along the sequence of routers indicated in the P-DAO, but in the
     reverse order, from egress to ingress.
     </t><t>

     The address of the predecessor to be used as destination of the propagated
     DAO message is found in the Via Address the precedes the one
     that contain the address of the propagating node, which is used as source
     of the message.

    </t><t>
     Upon receiving a propagated DAO, all except the Egress Router MUST install a route towards the DAO Target(s) via their successor in the VIO. The router MAY install additional routes towards the
     VIA Addresses that are the VIO after the next one, if any, but
     in case of a conflict or a lack of resource, the route(s) to the Target(s) have precedence.

     </t><t>
     If a router cannot reach its predecessor in the VIO,
     the router MUST answer to the Root with a negative DAO-ACK
     indicating the successor that is unreachable
     (suggested status 11 to be confirmed by IANA).
    </t><t>
     The process continues till the P-DAO is propagated to ingress router of
     the Segment, which answers with a DAO-ACK to the Root.
    </t>
    <t>
     A Segment Lifetime of 0 in a Via Information option is used to clean up the
     state. The P-DAO is forwarded as described above, but the DAO
     is interpreted as a No-Path DAO and results in cleaning up existing state
     as opposed to refreshing an existing one or installing a new one.
    </t>
      <t>In case of a forwarding error along an SMPR, the node
      that fails to forward SHOULD send an ICMP error with a code "Error in
      Projected Route" to the Root. Failure to do so may result in packet loss
      and wasted resources along the Projected Route that is broken.
      </t>
      </section>  <!-- "Storing Mode Projected DAO" -->
    </section>  <!-- "Projected DAO" -->



    <section><name>Security Considerations</name>

	<t>This draft uses messages that are already present in RPL
     <xref target='RFC6550'/> with optional secured versions. The same secured
     versions may be used with this draft, and whatever security is deployed for
     a given network also applies to the flows in this draft.

	</t>
	<t> TODO: should probably consider how P-DAO messages could be abused by

    a) rogue nodes b) via replay of messages c) if use of P-DAO messages could in fact deal with any threats?

	</t>
</section>
<section anchor='IANAcon'><name>IANA Considerations</name>


   <section anchor='RPLCtrlMsgReg'><name>New RPL Control Codes</name>

    <t>This document extends the IANA Subregistry created by RFC 6550 for RPL
    Control Codes as indicated in <xref target="ianaRPLCtrlMsgtbl"/>:</t>


        <table anchor="ianaRPLCtrlMsgtbl"><name>New RPL Control Codes</name>
   <thead>
          <tr><th align='center'>Code</th>

          <th align='left'>Description</th>

          <th align='left'>Reference</th></tr>

   </thead><tbody>

          <tr><td align='center'>0x09</td>

          <td align='left'>Projected DAO Request (PDR)</td>

          <td align='left'>This document</td></tr>

          <tr><td align='center'>0x0A</td>

          <td align='left'>PDR-ACK</td>

          <td align='left'>This document</td></tr>
   </tbody>
        </table>


   </section> <!-- "New RPL Control Codes" -->

   <section anchor='RPLCtrlMsgOptionsReg'><name>New RPL Control Message Options</name>

    <t>This document extends the IANA Subregistry created by RFC 6550 for
    RPL Control Message Options as indicated in <xref target="ianaRPLCtrlMsgopttbl"/>:</t>



        <table anchor="ianaRPLCtrlMsgopttbl"><name>RPL Control Message Options</name>
   <thead>
          <tr><th align='center'>Value</th>

          <th align='left'>Meaning</th>

          <th align='left'>Reference</th></tr>

   </thead><tbody>

          <tr><td align='center'>0x0B</td>

          <td align='left'>Via Information option</td>

          <td align='left'>This document</td></tr>

          <tr><td align='center'>0x0C</td>

          <td align='left'>Source-Routed Via Information option</td>

          <td align='left'>This document</td></tr>

          <tr><td align='center'>0x0D</td>

          <td align='left'>Sibling Information option</td>

          <td align='left'>This document</td></tr>
   </tbody>
        </table>

   </section> <!-- "RPL Control Message Options" -->

<!--


   <section anchor='IANAMop'>
   <name>Updating Registry for the RPL Mode of Operation</name>
    <t>This document is updating the registry created by RFC 6550 for the RPL
        3-bit Mode of Operation (MOP) as follows:
        </t>

        <table anchor="ianaMOPtbl"><name>DIO Mode of operation</name>
   <thead>

          <tr><th align='center'>MOP value</th>

          <th align='left'>Description</th>

          <th align='left'>Reference</th></tr>

   </thead><tbody>

          <tr><td align='center'>5</td>

          <td align='left'>Non-Storing Mode of operation with Projected Routes</td>

          <td align='left'>This document</td></tr>

          <tr><td align='center'>6</td>

          <td align='left'>Storing Mode of operation with Projected Routes</td>

          <td align='left'>This document</td></tr>
    </tbody>
        </table>

   </section> < Updating Registry for the RPL Mode of Operation >
        -->



   <section anchor='RPLPDRflagReg'>
   <name>SubRegistry for the Projected DAO Request Flags</name>

   <t>
   IANA is required to create a registry for the 8-bit Projected DAO Request
   (PDR) Flags field. Each bit is tracked with the following qualities:
   </t>
   <ul>
     <li>Bit number (counting from bit 0 as the most significant bit)</li>
     <li>Capability description</li>
     <li>Reference</li>
   </ul>

 <t> Registration procedure is "Standards Action" <xref target='RFC8126'/>. The initial allocation is as indicated in <xref target='RPLPDRflagRegtbl'/>:
 </t>

        <table anchor="RPLPDRflagRegtbl"><name>Initial PDR Flags</name>
   <thead>

          <tr><th align='center'>Bit number</th>

          <th align='left'>Capability description</th>

          <th align='left'>Reference</th></tr>

   </thead><tbody>

          <tr><td align='center'>0</td>

          <td align='left'>PDR-ACK request (K)</td>

          <td align='left'>This document</td></tr>

          <tr><td align='center'>1</td>

          <td align='left'>Requested path should be redundant (R)</td>

          <td align='left'>This document</td></tr>
    </tbody>
        </table>

   </section> <!-- SubRegistry for the Projected DAO Request Flags -->


   <section anchor='RPLPDRackflagReg'>
   <name>SubRegistry for the PDR-ACK Flags</name>

   <t>
   IANA is required to create an subregistry for the 8-bit PDR-ACK Flags field.
   Each bit is tracked with the following qualities:
   </t>
   <ul>
     <li>Bit number (counting from bit 0 as the most significant bit)</li>
     <li>Capability description</li>
     <li>Reference</li>
   </ul>

 <t>Registration procedure is "Standards Action" <xref target='RFC8126'/>.
    No bit is currently defined for the PDR-ACK Flags.
   </t>

   </section> <!-- SubRegistry for the PDR-ACK Flags -->



<section anchor='iana-stats-nonrej'>
<name>Subregistry for the PDR-ACK Acceptance Status Values </name>
 <t>
	IANA is requested to create a Subregistry for the PDR-ACK Acceptance
    Status values.
</t>
<ul spacing='normal'>
  <li> Possible values are 6-bit unsigned integers (0..63).</li>
  <li> Registration procedure is "Standards Action" <xref target='RFC8126'/>.</li>
  <li> Initial allocation is as indicated in <xref target='iana-ack-status'/>:</li>
</ul>




   <table anchor='iana-ack-status'><name>Acceptance values of the PDR-ACK Status</name>
   <thead>
      <tr><td>Value</td><td>Meaning</td><td>Reference</td></tr>
   </thead><tbody>
      <tr><td>0</td><td>Unqualified acceptance</td><td>This document</td></tr>
   </tbody>

   </table>


</section><!-- Subregistry for the PDR-ACK Acceptance Status Values -->


<section anchor='iana-stats-rej'>
<name>Subregistry for the PDR-ACK Rejection Status Values</name>
 <t>
	IANA is requested to create a Subregistry for the PDR-ACK Rejection
    Status values.
</t>
<ul spacing='normal'>
  <li> Possible values are 6-bit unsigned integers (0..63).</li>
  <li> Registration procedure is "Standards Action" <xref target='RFC8126'/>.</li>
  <li> Initial allocation is as indicated in <xref target='iana-nack-status'/>:</li>
</ul>


   <table anchor='iana-nack-status'><name>Rejection values of the PDR-ACK Status</name>
   <thead>
      <tr><td>Value</td><td>Meaning</td><td>Reference</td></tr>
   </thead><tbody>
      <tr><td>0</td><td>Unqualified rejection</td><td>This document</td></tr>
   </tbody>

   </table>

</section><!-- Subregistry for the PDR-ACK Rejection Status Values -->



   <section anchor='RPLRPOflagReg'>
   <name>SubRegistry for the Route Projection Options Flags</name>

   <t>
   IANA is requested to create a Subregistry for the 5-bit Route Projection Options
   (RPO) Flags field. Each bit is tracked with the following qualities:
   </t>
   <ul>
     <li>Bit number (counting from bit 0 as the most significant bit)</li>
     <li>Capability description</li>
     <li>Reference</li>
   </ul>

 <t> Registration procedure is "Standards Action" <xref target='RFC8126'/>.
   No bit is currently defined for the Route Projection Options (RPO) Flags.
   </t>

   </section> <!-- SubRegistry for the Route Projection Options Flags -->


   <section anchor='RPLSIOflagReg'>
   <name>SubRegistry for the Sibling Information Option Flags</name>

   <t>
   IANA is required to create a registry for the 5-bit Sibling Information
   Option (SIO) Flags field. Each bit is tracked with the following qualities:
   </t>
   <ul>
     <li>Bit number (counting from bit 0 as the most significant bit)</li>
     <li>Capability description</li>
     <li>Reference</li>
   </ul>

 <t> Registration procedure is "Standards Action" <xref target='RFC8126'/>. The initial allocation is as indicated in <xref target='RPLSIORegtbl'/>:
 </t>

        <table anchor="RPLSIORegtbl"><name>Initial SIO Flags</name>
   <thead>

          <tr><th align='center'>Bit number</th>

          <th align='left'>Capability description</th>

          <th align='left'>Reference</th></tr>

   </thead><tbody>

          <tr><td align='center'>0</td>

          <td align='left'>Connectivity is bidirectional (B)</td>

          <td align='left'>This document</td></tr>

    </tbody>
        </table>

   </section> <!-- SubRegistry for the Sibling Information Option Flags -->






   <section anchor='ICMPv6ErrPRoute'>
        <name>Error in Projected Route ICMPv6 Code</name>
        <t>In some cases RPL will return an ICMPv6 error message when a
        message cannot be forwarded along a Projected Route.
        This ICMPv6 error message is "Error in Projected Route".</t>

        <t>IANA has defined an ICMPv6 "Code" Fields Registry for ICMPv6
        Message Types. ICMPv6 Message Type 1 describes "Destination Unreachable"
        codes. This specification requires that a new code is allocated from the
        ICMPv6 Code Fields Registry for ICMPv6 Message Type 1, for "Error in
        Projected Route", with a suggested code value of 8, to be confirmed by
        IANA.</t>
   </section> <!--"ICMPv6: Error in a Projected Route" -->
</section> <!-- "IANA Considerations"-->


<section><name>Acknowledgments</name>
<t>The authors wish to acknowledge JP Vasseur, Remy Liubing, James Pylakutty and
   Patrick Wetterwald for their contributions to the ideas developed here.</t>
</section>

    </middle>
    <back>

   <displayreference   target="I-D.ietf-roll-useofrplinfo"     to="USEofRPLinfo"/>
   <displayreference   target="RFC6550"        to="RPL"/>
   <displayreference   target="I-D.pthubert-raw-architecture"   to="RAW-ARCHI"/>
   <displayreference   target="I-D.ietf-6tisch-architecture"    to="6TiSCH-ARCHI"/>
   <displayreference   target="I-D.ietf-roll-turnon-rfc8138" to="TURN-ON_RFC8138"/>

    <references><name>Normative References</name>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4443.xml'/>
	 <!--
     <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4919.xml'/>
     -->
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6282.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6550.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6554.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml'/>

    </references><references><name>Informative References</name>

	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7102.xml'/>
	   <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6997.xml'/>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-6tisch-architecture.xml'/>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.pthubert-raw-architecture.xml'/>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-roll-turnon-rfc8138.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8655.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8025.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8138.xml'/>

      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-roll-useofrplinfo.xml'/>

      <reference anchor='PCE' target='https://datatracker.ietf.org/doc/charter-ietf-pce/'>
         <front>
            <title>Path Computation Element</title>
            <author>
               <organization>IETF</organization>
            </author>
            <date/>
         </front>
      </reference>

    </references>

	<section><name>Applications</name>

       <section anchor='loose'><name>Loose Source Routing</name>


	  <t>A RPL implementation operating in a very constrained LLN typically uses
      the Non-Storing Mode of Operation as represented in <xref target='nost'/>.
      In that mode, a RPL node indicates a
      parent-child relationship to the Root, using a Destination Advertisement
      Object (DAO) that is unicast from the node directly to the Root,
      and the Root typically builds a source routed path to a destination down
      the DODAG by recursively concatenating this information.
      </t>

          <figure anchor='nost'><name>RPL Non-Storing Mode of operation </name>
            <artwork>
           ------+---------
                 |          Internet
                 |
              +-----+
              |     | Border Router
              |     |  (RPL Root)
              +-----+                      ^     |        |
                 |                         | DAO | ACK    |
           o    o   o    o                 |     |        | Strict
       o o   o  o   o  o  o o   o          |     |        | Source
      o  o o  o o    o   o   o  o  o       |     |        | Route
      o   o    o  o     o  o    o  o  o    |     |        |
     o  o   o  o   o         o   o o       |     v        v
     o          o             o     o
                       LLN
                       </artwork>
          </figure>
    <t>
      Based on the parent-children relationships expressed in the non-storing
      DAO messages,the Root possesses topological information about the whole
      network, though this information is limited to the structure of the DODAG
      for which it is the destination.
      A packet that is generated within the domain will always reach the Root,
      which can then apply a source routing information to reach the destination
      if the destination is also in the DODAG.
      Similarly, a packet coming from the outside of the domain for a destination
      that is expected to be in a RPL domain reaches the Root.
    </t>
    <t>
     It results that the Root, or then some associated centralized computation
     engine such as a PCE, can determine the amount of packets that reach a
     destination in the
     RPL domain, and thus the amount of energy and bandwidth that is wasted for
     transmission, between itself and the destination, as well as the risk of
     fragmentation, any potential delays because of a paths longer than
     necessary (shorter paths exist that would not traverse the Root).
    </t>
     <t>
     As a network gets deep, the size of the source routing header that the
      Root must add to all the downward packets becomes an issue for nodes that
      are many hops away. In some use cases, a RPL network forms long lines and
      a limited amount of well-Targeted routing state would allow to make the
      source routing operation loose as opposed to strict, and save packet size.
      Limiting the packet size is directly beneficial to the energy budget, but,
      mostly, it reduces the chances of frame loss and/or packet fragmentation,
      which is highly detrimental to the LLN operation. Because the capability
      to store a routing state in every node is limited, the decision of which
      route is installed where can only be optimized with a global knowledge of
      the system, a knowledge that the Root or an associated PCE may possess by
      means that are outside of the scope of this specification.
      </t>

      <t>
      This specification enables to store a Storing Mode state in
      intermediate routers, which enables to limit the excursion of the source
      route headers in deep networks.
      Once a P-DAO exchange has taken place for a given Target, if the Root
      operates in non Storing Mode, then it may elide the sequence of routers
      that is installed in the network from its source route headers to
      destination that are reachable via that Target, and the source route
      headers effectively become loose.
      </t>

      </section> <!-- Loose Source Routing -->
    <section><name>Transversal Routes</name>

      <t>
      RPL is optimized for Point-to-Multipoint (P2MP) and Multipoint-to-Point
      (MP2P), whereby routes are always installed along the RPL DODAG
      respectively from and towards the DODAG Root. Transversal
      Peer to Peer (P2P) routes in a RPL network will generally suffer from some
      elongated (stretched) path versus the best possible path, since routing
      between 2 nodes always happens via a common parent, as illustrated in
      <xref target='stretch'/>:
        </t><ul spacing='normal'>
        <li>In Storing Mode, unless the destination is a child of the source,
     the packets will follow the default route up the DODAG as well.
     If the destination is in the same DODAG, they will eventually reach a
     common parent that has a route to the destination; at worse, the common
     parent may also be the Root. From that common parent, the packet will
     follow a path down the DODAG that is optimized for the Objective Function
     that was used to build the DODAG.</li>
        <li> in Non-Storing Mode, all packets
     routed within the DODAG flow all the way up to the Root of the DODAG. If
     the destination is in the same DODAG, the Root must encapsulate the packet
     to place an RH that has the strict source route information down
     the DODAG to the destination. This will be the case even if the destination
     is relatively close to the source and the Root is relatively far off.
        </li>
        </ul><t>
     </t>


       <figure anchor='stretch'><name>Routing Stretch between S and D via common parent X</name>
            <artwork>
                   ------+---------
                    |          Internet
                    |
                 +-----+
                 |     | Border Router
                 |     |  (RPL Root)
                 +-----+
                    X
              ^    v   o    o
          ^ o   o  v   o  o  o o   o
         ^  o o  o v    o   o   o  o  o
         ^   o    o  v     o  o    o  o  o
        S  o   o  o   D         o   o o
        o          o             o     o
                          LLN
       </artwork>
          </figure>



     <t>
     It results that it is often beneficial to enable transversal P2P routes,
     either if the RPL route presents a stretch from shortest path, or if the
     new route is engineered with a different objective, and that it is
     even more critical in Non-Storing Mode than it is in Storing Mode, because
     the routing stretch is wider.
     For that reason, earlier work at the IETF introduced the
     <xref target='RFC6997'>"Reactive Discovery of Point-to-Point Routes in
     Low Power and Lossy Networks"</xref>, which specifies a distributed method for
     establishing optimized P2P routes. This draft proposes an alternate based
     on a centralized route computation.
     </t>

        <figure anchor='opti2'><name>Projected Transversal Route</name>
            <artwork>
              ------+---------
                    |          Internet
                    |
                 +-----+
                 |     | Border Router
                 |     |  (RPL Root)
                 +-----+
                    |
              o    o   o    o
          o o   o  o   o  o  o o   o
         o  o o  o o    o   o   o  o  o
         o   o    o  o     o  o    o  o  o
        S>>A>>>B>>C>>>D         o   o o
        o          o             o     o
                          LLN
       </artwork>
          </figure>
            <t>
      This specification enables to store source-routed or Storing Mode state in
      intermediate routers, which enables to limit the stretch of a P2P route
      and maintain the characteristics within a given SLA. An example of service
      using this mechanism oculd be a control loop that would be installed in a
      network that uses classical RPL for asynchronous data collection. In that
      case, the P2P path may be installed in a different RPL Instance, with a
      different objective function.
      </t>
      </section>
      </section>

    </back>




</rfc>
