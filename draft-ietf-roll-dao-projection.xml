<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<!--

_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-


todo 1 stitching PDAO segments

As you know, a 6TiSCH Track can be a lot more complex than a sequence of nodes (see https://tools.ietf.org/html/draft-ietf-6tisch-architecture-24#section-4.5.3)
It results that deploying a Track requires stitching segments into a DODAG from source to destination.
What makes the most sense for a 6TISCH Track is probably that each track is defined as a DODAG local Instance for the source. All the PDAO segments would be stitched together into that DODAG to form a Track.
The current draft allows for this but a section that explains it all would certainly be useful.

https://mailarchive.ietf.org/arch/msg/roll/59IYmAmLoC1eLvS3GO8zYfTG7c0 Stitching PDAO segments
It takes a collection of segments to build a 6TiSCH Track. We need to signal that segments that we install separately belong to a same Track.

_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-


todo 2: Request a P DAO from an arbitrary router (DIS to Root?)


https://mailarchive.ietf.org/arch/msg/roll/b4D20dCabKgFrpxDuxs-1bZJRxQ Querying PDAO
We discussed the need for a node to ask for a path with one or more destination and constraints. We discussed the use of a DIS with constraints that we could express using RFC 6551 I guess.

_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-


Todo 3 Sibling information

https://mailarchive.ietf.org/arch/msg/roll/Z-ZZzL-NAVfgJAir35gG6YtCpkU Sibling information
We discussed the need to provide not only alternate parents but also links to siblings to the Root. The siblings links would be for computing P2P routes that are not along the DODAG, e.g., non storing Projected Routes. We need meta like step of rank signaled for both parents and siblings. Also, we probably want that only one of the siblings advertises the link.

_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-

Todo 4 Compressing the PDAO natively


https://mailarchive.ietf.org/arch/msg/roll/KkcJYTjpMrOFvLbPhbLME0o1E1w Compressing the PDAO natively
Basically use RFC 8138 to compress the VIA option.

_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-_.-

-->

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>
<?rfc authorship="yes"?>
<?rfc tocappendix="yes"?>
<rfc  xmlns:xi="http://www.w3.org/2001/XInclude" category="std" ipr='trust200902' tocInclude="true"  obsoletes="" updates="6550" consensus="true" submissionType="IETF" xml:lang="en" version="3" docName="draft-ietf-roll-dao-projection-07" >

<front>

   <title abbrev='DAO Projection'>Root initiated routing state in RPL</title>
   <author initials='P' surname='Thubert' fullname='Pascal Thubert' role='editor'>
      <organization abbrev='Cisco Systems'>Cisco Systems, Inc</organization>
      <address>
         <postal>
            <street>Building D</street>
            <street>45 Allee des Ormes - BP1200 </street>
            <city>Mougins - Sophia Antipolis</city>
            <code>06254</code>
          <country>France</country>
         </postal>
         <phone>+33 497 23 26 34</phone>
         <email>pthubert@cisco.com</email>
      </address>
   </author>

    <author fullname="Rahul Arvind Jadhav" initials="R.A." surname="Jadhav">
        <organization>Huawei Tech</organization>
        <address>
            <postal>
                <street>Kundalahalli Village, Whitefield,</street>
                <city>Bangalore</city>
                <region>Karnataka</region>
                <code>560037</code>
                <country>India</country>
            </postal>
            <phone>+91-080-49160700</phone>
            <email>rahul.ietf@gmail.com</email>
        </address>
    </author>

<author initials='M' surname='Gillmore' fullname='Matthew Gillmore'>
      <organization abbrev='Itron'>Itron, Inc</organization>
      <address>
         <postal>
            <street>Building D</street>
            <street>2111 N Molter Road</street>
            <city>Liberty Lake</city>
            <code>99019</code>
            <country>United States</country>
         </postal>
         <phone>+1.800.635.5461</phone>
         <email>matthew.gillmore@itron.com</email>
      </address>
   </author>

        <date/>

	<area>Routing</area>

	<workgroup>ROLL</workgroup>

        <abstract>
	  <t>
		This document proposes a protocol extension to RPL that enables to
        install a limited amount of centrally-computed routes in a RPL graph,
        enabling loose source routing down a non-storing mode DODAG, or
        transversal routes inside the DODAG.
        As opposed to the classical route injection in RPL that are injected
        by the end devices, this draft enables the Root of the DODAG to
        projects the routes that are needed on the nodes where they should be
        installed.
	  </t>
	</abstract>
    </front>

    <middle>

	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<section anchor='introduction'><name>Introduction</name>

	   <t> The <xref target='RFC6550'>
	 "Routing Protocol for Low Power and Lossy Networks"</xref> (LLN)(RPL)
     is a generic Distance Vector protocol that is well suited
     for application in a variety of low energy Internet of Things (IoT)
     networks.

     RPL forms Destination Oriented Directed Acyclic Graphs (DODAGs) in which
     the Root often acts as the Border Router to connect the RPL domain to the
     Internet. The Root is responsible to select the RPL Instance that is used
     to forward a packet coming from the Internet into the RPL domain and set
     the related RPL information in the packets.
	  </t>



     <t>
      The  <xref target='I-D.ietf-6tisch-architecture'>
      6TiSCH architecture </xref> leverages RPL for its routing operation and
      considers the <xref target='RFC8655'>
      Deterministic Networking Architecture</xref> as one possible model
      whereby the device resources and capabilities are exposed to an external
      controller which installs routing states into the network based on some
      objective functions that reside in that external entity.
	  </t>
     <t>
     Based on heuristics of usage, path length, and knowledge of device capacity
     and available resources such as battery levels and reservable buffers, a
     Path Computation Element (<xref target='PCE'/>) with a global visibility
     on the system could install additional P2P routes that are more optimized
     for the current needs as expressed by the objective function.
	  </t>
     <t>
     This draft enables a RPL Root to install and maintain Projected Routes
     within its DODAG, along a selected set of nodes that may or may
     not include self, for a chosen duration. This potentially enables routes
     that are more optimized than those obtained with the distributed operation
     of RPL, either in terms of the size of a source-route header or in terms of
     path length, which impacts both the latency and the packet delivery ratio.
     Projected Routes may be installed in either Storing and Non-Storing Modes
     Instances of the classical RPL operation, resulting in potentially hybrid
     situations where the mode of some Projected Routes is different from that
     of the other routes in the RPL Instance.
	  </t>
     <t>
     Projected Routes must be used with the parsimony to limit the amount of
     state that is installed in each device to fit within its resources, and to
     limit the amount of rerouted traffic to fit within the capabilities of the
     transmission links.
     The algorithm used to compute the paths and the protocol used to learn the
     topology of the network and the resources that are available in devices and
     in the network are out of scope for this document.
     Possibly with the assistance of a Path Computation Element
     (<xref target='PCE'/>) that could have a better visibility on the
     larger system, the Root computes which segment could be optimized and uses
     this draft to install the corresponding Projected Routes.
	  </t>
     <t>
     A Projected Route may be a stand-alone path to a Target or a segment in a
     complex Track <xref target='I-D.ietf-6tisch-architecture'/> that provides
     redundant forwarding solutions to a destination to improve reliability and
     availability of the wireless transmissions
     <xref target='I-D.pthubert-raw-problem-statement'/>.
    </t>
     <!--
    <t>
     It is envisaged that the computation could use the ratio
     between the optimal path (existing path not traversing the Root, and the
     current path), the application service level agreement (SLA) for specific
     flows that could benefit from shorter paths, the energy wasted in the
     network, local congestion on various links that would benefit from having
     flows routed along alternate paths.
    </t>
    <t>
     In particular, the draft expects that the Root has enough information about
     the capability
     for each node to store a number of routes, which can be discovered for
     Instance using a Network Management System (NMS) and/or the RPL routing
     extensions specified in
      <xref target="RFC6551">"Routing Metrics Used for Path Calculation in LLNs"</xref>.
    </t>
     -->
    </section>

	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->

<section><name>Terminology</name>
<section anchor='bcp'><name>BCP 14</name>
<t>

    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
    "OPTIONAL" in this document are to be interpreted as described in BCP 14
    <xref target='RFC2119'/><xref target='RFC8174'/> when, and only when, they
    appear in all capitals, as shown here.

</t>
</section>	<!-- end section "BCP 14" -->


<section anchor='gloss'><name>Subset of a 6LoWPAN Glossary</name>
    <t> This document often uses the following acronyms:
       </t><dl spacing='normal'>
       <dt>6BBR:</dt><dd> 6LoWPAN Backbone Router </dd>
       <dt>6LBR:</dt><dd> 6LoWPAN Border Router </dd>
       <dt>6LN:</dt><dd> 6LoWPAN Node  </dd>
       <dt>6LR:</dt><dd> 6LoWPAN Router </dd>
       <dt>DAD:</dt><dd> Duplicate Address Detection </dd>
       <dt>DODAG:</dt><dd> Destination-Oriented Directed Acyclic Graph </dd>
       <dt>LLN:</dt><dd> Low-Power and Lossy Network </dd>
       <dt>NA:</dt><dd>  Neighbor Advertisement </dd>
       <dt>NCE:</dt><dd>  Neighbor Cache Entry  </dd>
       <dt>ND:</dt><dd>  Neighbor Discovery  </dd>
       <dt>NDP:</dt><dd>  Neighbor Discovery Protocol </dd>
       <dt>NS:</dt><dd>  Neighbor Solicitation  </dd>
       <dt>RPL:</dt><dd> IPv6 Routing Protocol for LLNs
			 <xref target='RFC6550'/> </dd>
       <dt>CMO:</dt><dd> Control Message Option</dd>
       <dt>DAO:</dt><dd> Destination Advertisement Object</dd>
       <dt>VIO:</dt><dd> A Via Information Option, used in Storing Mode P-DAO messages.    </dd>
       <dt>SRVIO:</dt><dd> A Source-Routed Via Information Option, used in Non-Storing Mode P-DAO messages.    </dd>
       <dt>RPO:</dt><dd> A Route Projection Option; it can be a VIO or an SRVIO.    </dd>
      <dt>P-DAO:</dt><dd> A Projected DAO is a DAO message sent by the RPL Root to install a Projected Route.
    </dd>
       <dt>RTO:</dt><dd> RPL Target Option </dd>
       <dt>RAN:</dt><dd> RPL-Aware Node </dd>
       <dt>RA:</dt><dd>  Router Advertisement  </dd>
       <dt>RS:</dt><dd>  Router Solicitation  </dd>
       </dl><t>
    </t>
</section>	<!-- end section "Subset of a 6LoWPAN Glossary" -->

<section anchor='new'><name>Other Terms</name>
    <t>
    <!-- Removed reference from routing and 6tisch here to keep it simple
	 This specification introduces the following terminology:-->
    </t><dl spacing='normal'>

    <dt>Projected Route:</dt><dd>
	A Projected Route is a serial path that is computed and installed remotely
    by a RPL Root.</dd>
    <dt>Track:</dt><dd>
    The term Track is used in this document to refer to a complex path,
    e.g., a DODAG, that incorporates redundant Projected Routes towards a
    destination for increased reliability, high availability and load balancing.
    </dd>
    </dl>
</section>	<!-- end section "New Terms" -->
  <section anchor='lo'><name>References</name>
    <t>
	In this document, readers will encounter terms and concepts
	that are discussed in the following documents:
	</t><ul spacing='normal'>
<!--  CEP: There aren't any terms from RFC 3972.  Concepts, O.K.   -->
	<li>
    <xref target='RFC6550'>"Routing Protocol for Low Power and Lossy Networks"
		</xref>, and </li>
	<li>
    <xref target='RFC7102'>"Terminology in Low power And Lossy Networks"
		</xref>. </li>

	</ul><t>
    </t>
  </section>	<!-- end section "References" -->

</section>	<!-- end section "Terminology" -->


    <section anchor='ext6550'><name>Extending RFC 6550</name>

   <t>
   This specification introduces two new RPL Control Messages to enable a RPL
   Aware Node (RAN) to request the establisment of a path from self to a Target.
   A RAN may request the installation of a path by sending a new P-DAO Request
   PDR) Message to the Root. The Root confirms with a new PDR-ACK message back
   to the requester RAN with a completion status once it is done installing the
   path. See <xref target='pdaoreq'/> for more.
   </t>

	<t>
   Section 6.7 of <xref target='RFC6550'/> specifies Control Message Options
   (CMO) to be placed in RPL messages such as the Destination Advertisement
   Object (DAO) message. The RPL Target Option (RTO) and the Transit Information
   Option (TIO) are such options.
   In Non-Storing Mode, the TIO option is used in the DAO message to indicate
   a parent within a DODAG.  The TIO applies to the RTOs that immedially preceed
   it in the message. Options may be factorized; multiple TIOs may be
   present to indicate multiple routes to the one or more contiguous addresses
   indicated in the RTOs that immediately precede the TIOs in the RPL message.
   </t>
  <t>
   This specification introduces two new CMOs referred to as Route Projection
   Options (RPO) to install Projected Routes. One RPO is the Via Information
   Option (VIO) and the other is the Source-Routed VIO (SRVIO). The VIO installs
   a route on each hop along a Projected Route (in a fashion analogous to RPL
   Storing Mode) whereas the SRVIO installs a source-routing state at the
   ingress node, which uses that state to insert a routing header in a fashion
   similar to Non-Storing Mode.
   Like the TIO, the RPOs MUST be preceded by one or more RTOs to
   which they apply, and they can be factorized: multiple contiguous RPOs
   indicate alternate paths to the Target(s), more in <xref target='rplrpo'/>.
   </t>
   <t>
   This specification also introduces a new CMO to enable a RPL Router to
   indicate its siblings to the Root, more in <xref target='siof'/>.

   </t>

  </section> <!-- Extending RFC 6550 -->


     <section><name>Identifying a Path</name>
     <t>
     It must be noted that RPL has a concept of Instance to represent different
     routing topologies but does not have a concept of an administrative
     distance, which exists in certain proprietary implementations to sort out
     conflicts between multiple sources of routing information within one
     routing topology. This draft conforms the Instance model as follows:
     </t><ul spacing='normal'>
     <li>
     If the PCE needs to influence a particular Instance to add better routes
     in conformance with the routing objectives in that Instance, it may do so
     as long as it does not create a loop. A Projected Route is always
     preferred over a route that is learned via RPL. This specification uses
     the RPL Root as a proxy to the PCE. If the actual PCE is a separate entity,
     then a protocol that is out of scope for this specification is needed to
     relay the control elements between the RPL Root and the PCE.
     </li>
     <li>
     A PCE that installs a more specific (say, Traffic Engineered) and possibly
     complex path (aka a Track) towards a particular Target MUST use a Local RPL
     Instance (see section 5 of <xref target='RFC6550'/>) associated to that
     Target to identify the path. We refer to that Local RPLInstanceID as
     TrackID. A projected path is uniquely identified within the RPL domain by
     the tuple (Target address, TrackID). When packet is placed on a Track, a
     RPL Packet Information (RPI) is added with the TrackID as RPLInstanceID.
     The RPLInstanceID has the 'D' flag set, indicating that the destination
     address in the IPv6 header is the Target that is used to identify the
     Track.
     </li>
     <li>
     A packet that is routed over a projected path MUST NOT be placed over a
     different RPL Instance again. A packet that is placed on a Global Instance
     MAY be injected in a Local Instance based on a network policy and the Local
     Instance configuration.
     <!-- TODO: add config parm to the local Instance -->
     </li>
     </ul>
     <t>
     A Projected Route is a serial path that may the whole path or a segment in
     a complex Track, in which case multiple Projected Routes are installed with
     the stuple (Target address, TrackID), and a node that is present on more
     than one segment in a Track may be able to use either of the Projected
     Routes to forward towards the Target. The selection of the best route in a
     Track at forwarding time is out of scope for this document.
     <xref target='I-D.pthubert-raw-problem-statement'/> elaborates on that
     particular problem.
   </t>
    </section><!-- RPL Instances -->


    <section anchor='rplccmo'><name>New RPL Control Messages and Options</name>



    <section anchor='pdaoreq'><name>New P-DAO Request Control Message</name>

               <t>
    The PDR is sent to the Root to request a new Path. Exactly one Target
    Options MUST be present.
    <!--
    TODO: A P-DAO parameter option MAY be present as well to provide additional
    information on the requested path.
    -->
    </t>
    <t>
    The format of P-DAO Request (PDR) Base Object is as follows:
    </t>

<figure anchor='disupdfmt'><name>New P-DAO Request Format</name>
              <artwork>

        0                   1                   2                   3
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       | RPLInstanceID |K|R|   Flags   |  PDRLifetime  | PDRSequence   |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |   Option(s)...
       +-+-+-+-+-+-+-+-+

 </artwork>
</figure>



 <!-- TODO ask flags registry to IANA

 -->
          <dl spacing='normal'>
              <dt>TrackID:</dt><dd>8-bit field indicating the topology
              Instance associated with the Track. It is set to zero upon the
              first request for a new Track and then to the TrackID once the
              Track was created, to either renew it of destroy it.
              </dd>
              <dt>K:</dt><dd>The 'K' flag is set to indicate that the recipient
              is expected to send a PDR-ACK back.
              </dd>
              <dt>R:</dt><dd>The 'R' flag is set to indicate that the Requested
              path should be redundant.
              </dd>
              <dt>PDRLifetime:</dt><dd> 8-bit unsigned integer.
              The requested lifetime for the Track expressed in Lifetime Units
              (obtained from the Configuration option). A PDR with a fresher
              PDRSequence refreshes the lifetime, and a PDRLifetime of 0
              indicates that the track should be destroyed.
              </dd>
              <dt>PDRSequence:</dt><dd> 8-bit wrapping sequence number.
              The PDRSequence obeys the operation in section 7.2 of
              <xref target='RFC6550'/>. It is incremented at each PDR message
              and echoed in the PDR-ACK by the Root. The PDRSequence is used to
              correlate a PDR-ACK message with the PDR message that triggeted it.
              </dd>

            </dl>

    </section> <!-- New P-DAO Request Control Message -->

    <section anchor='rpldisackl'><name>New PDR-ACK Control Message</name>
    <t>
    The new PDR-ACK is sent as a response to a PDR message with the 'K' flag
    set. Its format is as follows:
    </t>
 <!-- TODO ask for the control message to IANA  -->
<figure anchor='disackfmt'><name>New PDR-ACK Control Message Format</name>
              <artwork>

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |    TrackID    | PDR-ACK Status|     Flags     | Track Lifetime|
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  PDRSequence  |                Reserved                       |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  Option(s)...
     +-+-+-+-+-+-+-+
 </artwork>
</figure>

          <dl spacing='normal'>
              <dt>TrackID:</dt><dd>
             The RPLInstanceID of the Track that was created. Set to 0 when no
             Track is created.
              </dd>
              <dt>PDR-ACK Status:</dt><dd>
             Indicates the completion.  A value up to 127 means acceptance
             Values of 128 and above are used for rejection codes; <!-- TODO table of rejection code in IANA -->
              </dd>

             <!-- TODO registry of flags in IANA -->
              <dt>Track Lifetime:</dt><dd>
             Indicates that remaining Lifetime for the Track, 0 if the Track was
             destroyed or not created.
              </dd>

              <dt>PDRSequence:</dt><dd> 8-bit wrapping sequence number.
              It is incremented at each PDR message and echoed in the PDR-ACK.
              </dd>


            </dl>

    </section> <!-- New PDR-ACK Control Message -->


     <section anchor='rplrpo'><name>Route Projection Options</name>

    <t>The RPOs indicate a series of IPv6 addresses that can be compressed using
    the method defined in the <xref target='RFC8138'>"6LoWPAN Routing Header"
    </xref> specification using the address of the Root found in the DODAGID
    field of DIO messages as Compression Reference.
    </t><t>
    An RPO indicates a Projected Route that can be a serial Track in full or
    a segment of a more complex Track. The Track is identified by a
    RPLInstanceID that is either Global or local to the Target of the
    Track.
    </t><t>
    The format of RPOs is as follows:
    </t>
<figure anchor='viao'><name>Via Information option format</name>
              <artwork>
     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |   Type        | Option Length |Comp.|  Flags  |    TrackID    |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    | Path Lifetime | Path Sequence |     Reserved                  |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    +                                                               +
    .                                                               .
    .                     Via Address 1                             .
    .                                                               .
    +                                                               +
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    .                              ....                             .
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    +                                                               +
    .                                                               .
    .                     Via Address n                             .
    .                                                               .
    +                                                               +
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 </artwork>
</figure>

          <dl spacing='normal'>
              <dt>Option Type:</dt><dd>0x0A for VIO, 0x0B for SRVIO
                                     (to be confirmed by IANA)</dd>

              <dt>Option Length:</dt><dd>In bytes; variable, depending on the number
              of Via Addresses.</dd>

              <dt>Compression Type:</dt><dd>16-bit unsigned integer. This is the
              SRH-6LoRH Type as defined in figure 7 in section 5.1 of
              <xref target='RFC8138'/> that corresponds to the compression used
              for all the Via Addresses.
              </dd>

              <dt>TrackID:</dt><dd>8-bit field indicating the topology Instance
               associated with the Track.
              </dd>

              <dt>Path Lifetime:</dt><dd>8-bit unsigned integer. The length
              of time in Lifetime Units (obtained from the Configuration
              option) that the prefix is valid for route determination. The
              period starts when a new Path Sequence is seen. A value of 255
              (0xFF) represents infinity. A value of zero (0x00)
              indicates a loss of reachability. A DAO message that
              contains a Via Information option with a Path Lifetime of
              zero for a Target is referred as a No-Path (for that Target) in
              this document.</dd>

              <dt>Path Sequence:</dt><dd>8-bit unsigned integer. When a RPL
              Target option is issued by the Root of the DODAG
              (i.e. in a DAO message), that Root sets the Path Sequence and
              increments the Path Sequence each time it issues a RPL Target
              option with updated information. The indicated sequence
              deprecates any state for a given Target that was learned from a
              previous sequence and adds to any state that was learned for
              that sequence.</dd>

              <dt>Via Address:</dt><dd>2 to 16 bytes, a compressed IPv6 Address.
              A Via Address indicates the next hop within the path towards the
              destination(s) that is indicated in the Target option that
              immediately precede the RPO in the DAO message. Via Addresses are
              indicated in the order of the path from the ingress to the egress
              nodes. All Via addresses are expressed in the same size as
              indicated by the Compression Type.
              </dd>
            </dl>
               <t>
    An RPO MUST contain at least one Via Address, and a Via Address MUST NOT be
    present more than once, otherwise the RPO MUST be ignored.
    </t>
    </section> <!-- Route Projection Options -->
    <section anchor='rplsib'><name>Sibling Information Option</name>

    <t>
    The Sibling Information Option (SIO) provides indication on siblings that
    could be used by the Root to form Projected Routes.
    The format of SIOs is as follows:
    </t>
<figure anchor='siof'><name>Sibling Information Option Format</name>
              <artwork>
     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |   Type        | Option Length |Comp.|B| Flags |    Opaque     |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |            Step of Rank       |       Reserved                |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    +                                                               +
    .                                                               .
    .                     Sibling Address                           .
    .                                                               .
    +                                                               +
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 </artwork>
</figure>

          <dl spacing='normal'>
              <dt>Option Type:</dt><dd>0x0C (to be confirmed by IANA)</dd>

              <dt>Option Length:</dt><dd>In bytes; variable, depending on the number
              of Via Addresses.</dd>

              <dt>Compression Type:</dt><dd>16-bit unsigned integer. This is the
              SRH-6LoRH Type as defined in figure 7 in section 5.1 of
              <xref target='RFC8138'/> that corresponds to the compression used
              for the Sibling Address.
              </dd>

              <dt>B:</dt><dd>
              1-bit flag that is set to indicate that the connectivity to the sibling
              is bidirectional and roughly symmetrical. In that case, only one of the siblings may
              report the SIO for the hop. If 'B' is not set then the SIO only indicates connectivity
              from the sibling to this node, and does not provide information on the hop from this node
              to the sibling.
              <!-- TODO registry of flags in IANA -->
              </dd>
              <dt>Opaque:</dt><dd>MAY be used to carry information that the node
              and the Root understand, e.g., a particular representation of the
              Link properties such as a proprietary Link Quality Information
              for packets received from the sibling. An industraial Alliance
              that uses RPL for a particular use / environment MAY redefine the
              use of this field to fit its needs.
              </dd>

              <dt>Step of Rank:</dt><dd>16-bit unsigned integer. This is the
              Step of Rank <xref target='RFC6550'/> as computed by the Objective
              Function between this node and the sibling.
              </dd>

              <dt>Reserved:</dt><dd>MUST be set to zero by the sender and MUST
              be ignored by the receiver.
              </dd>

              <dt>Sibling Address:</dt><dd>2 to 16 bytes, a compressed IPv6 Address.
              a Via Address indicates the next hop towards the destination(s)
              that is indicated in the Target option that immediately precede
              the RPO in the DAO message. Via Addresses are indicated in
              the order of the data path from the ingress to the egress nodes.
              All Via addresses are expressed in the same size as indicated by
              the Compression Type
              <!--TBD: See how the /64 prefix can be elided if it is the same as
              that of (all of) the Target(s). In that case, the Next-Hop Address
              could be expressed as the 8-bytes suffix only.-->
              </dd>
            </dl>               <t>
    An SIO MAY be immediately followed by a DAG Metric Container. In that case
    the DAG Metric Container provides additional metrics for the hop from the Sibling
    to this node.
    </t>
    </section> <!-- Sibling Information Option -->




    </section> <!-- New RPL Control Messages and Options -->

    <section anchor='pdao'><name>Projected DAO</name>

    <t>
    This draft adds a capability to RPL whereby the Root of a DODAG projects a
    route by sending an extended DAO message called a Projected-DAO (P-DAO) to an
    arbitrary router in the DODAG, indicating one or more sequence(s) of routers
    inside the DODAG via which the Target(s) indicated in the RPL Target
    Option(s) (RTO) can be reached.
     </t> <t>
    A P-DAO is sent from a global address of the Root to a global address of the
    recipient, and MUST be confirmed by a DAO-ACK, which is sent back to a
    global address of the Root.
     </t> <t>
    A P-DAO message MUST contain at least one RTO and at least one RPO following
    it. There can be at most one such sequence of RTOs and then RPOs.
     </t> <t>
    Like a classical DAO message, a P-DAO is processed only if it is "new"
    per section 9.2.2. "Generation of DAO Messages" of the <xref target='RFC6550'>
    RPL specification</xref>; this is determined using the Path Sequence
    information from the RPO as opposed to a TIO. Also, a Path Lifetime of 0 in
    an RPO indicates that a route is to be removed.
     </t> <t>
    There are two kinds of operation for the Projected Routes, the Storing Mode
    and the Non-Storing Mode.
    </t><ul spacing='normal'>
     <li>
    The Non-Storing Mode is discussed in <xref target='nspdao'/>.
    It uses an SRVIO that carries a list of Via Addresses to be used as a
    source-routed path to the Target. The recipient of the P-DAO is the
    ingress router of the source-routed path. Upon a Non-Storing Mode P-DAO, the
    ingress router installs a source-routed state to the Target and replies to
    the Root directly with a DAO-ACK message.
     </li>
    <li>
    The Storing Mode is discussed in <xref target='spdao'/>. It uses
    a VIO with one Via Address per consecutive hop, from the ingress to the
    egress of the path, including the list of all intermediate routers in the
    data path order.
    The Via Addresses indicate the routers in which the routing state to the
    Target have to be installed via the next Via Address in the VIO.
    In normal operations, the P-DAO is propagated along the chain of Via Routers
    from the egress router of the path till the ingress one, which confirms the
    installation to the Root with a DAO-ACK message.
    Note that the Root may be the ingress and it may be the egress of the
    path, that it can also be neither but it cannot be both.
     </li>
     </ul><t>

    </t>
    <t>In case of a forwarding error along a Projected Route, an ICMP error is
    sent to the Root with a new Code "Error in Projected Route"
    (See <xref target='ICMPv6ErrPRoute'/>).
    The Root can then modify or remove the Projected Route.
    The "Error in Projected Route" message has the same format as the
    "Destination Unreachable Message", as specified in RFC 4443
    <xref target='RFC4443'/>.
    The portion of the invoking packet that is sent back in the ICMP message
    SHOULD record at least up to the routing header if one is present, and the
    routing header SHOULD be consumed by this node so that the destination in
    the IPv6 header is the next hop that this node could not reach.
    if a 6LoWPAN Routing Header (6LoRH) <xref target='RFC8138'/> is used to
    carry the IPv6 routing information in the outter header then that whole
    6LoRH information SHOULD be present in the ICMP message.
    The sender and exact operation depend on the Mode and is described in
    <xref target='nspdao'/> and <xref target='spdao'/> respectively.
    </t>
    <!--t>
    Note: The Target of a route that is installed by a P-DAO is not necessarily
    inside the DODAG, though how the Root and the optional PCE obtain the
    additional topological information to compute other routes is out of scope
    for this document.
    </t-->

    <section anchor='nspdao'><name>Non-Storing Mode Projected Route</name>

    <t>
    As illustrated in <xref target='nsdf'/>, a P-DAO that carries an SRVIO
    enables the Root to install a source-routed path towards a Target in any
    particular router; with this path information the router can add a source
    routed header reflecting the Projected Route to any packet for which the current
    destination either is the said Target or can be reached via the Target.
    </t>

          <figure anchor='nsdf'><name>Projecting a Non-Storing Route</name>
            <artwork>
           ------+---------
                 |          Internet
                 |
              +-----+
              |     | Border Router
              |     |  (RPL Root)
              +-----+                   |  P  ^            |
                 |                      | DAO | ACK        | Loose
           o    o   o    o     router   V     |            | Source
       o o   o  o   o  o  o      o  o            | P-DAO   . Route
      o  o o  o o    o   o   o  o  o             | Source  . Path
      o   o    o  o     o  o    o  o  o          | Route   . From
     o  o   o  o   o         o   o o             | Path    . Root
        o  o  o  o             o    Target       V         . To
       o       o               o    o                      | Desti-
     o          o             o     o                      | nation
                                   destination             V

                       LLN
                       </artwork>
          </figure>
    <t>
    A route indicated by an SRVIO may be loose, meaning that the node that owns
    the next listed Via Address is not necessarily a neighbor. Without proper
    loop avoidance mechanisms, the interaction of loose source routing and other
    mechanisms may effectively cause loops. In order to avoid those loops, if
    the router that installs a Projected Route does not have a connected route
    (a direct adjacency) to the next soure routed hop and fails to locate it as
    a neighbor or a neighbor of a neighbor, then it MUST ensure that it has
    <!-- a loopless path to it that will not interact with the Projected Route, for Instance  -->
    another Projected Route to the next loose hop under the control of the same
    route computation system, otherwise the P-DAO is rejected.
    </t>
    <t>
      When forwarding a packet to a destination for which the router determines
      that routing happens via the Target, the router inserts the source routing
      header in the packet to reach the Target. In the case of a loose
      source-routed path, there MUST be either a neighbor that is adjacent to the
      loose next hop, on which case the packet s forwarded to that neighbor, or
      a source-routed path to the loose next hop; in the latter case,
      another encapsulation takes place and the process possibly recurses;
      otherwise the packet is dropped.
     </t>
    <t>
      In order to add a source-routing header, the router encapsulates the
      packet with an IP-in-IP header and a non-storing mode source routing
      header (SRH) <xref target='RFC6554'/>.
      In the uncompressed form the source of the packet would be self, the
      destination would be the first Via Address in the SRVIO, and the SRH would
      contain the list of the remaining Via Addresses and then the Target.</t>
    <t>
      In practice, the router will normally use the <xref target='RFC8025'>
      "IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Paging
      Dispatch"</xref> to compress the RPL artifacts as indicated in
      <xref target='RFC8138'/>. In that case, the router indicates self as
      encapsulator in an IP-in-IP 6LoRH Header, and places the list of Via
      Addresses in the order of the VIO and then the Target in the SRH 6LoRH
      Header.
      </t>
      <t>In case of a forwarding error along a Source Route path, the node that
      fails to forward SHOULD send an ICMP error with a code "Error in Source
      Routing Header" back to the source of the packet, as described in section
      11.2.2.3. of <xref target='RFC6550'/>. Upon this message, the
      encapsulating node SHOULD stop using the source route path for a period
      of time and it SHOULD send an ICMP message with a Code "Error in
      Projected Route" to the Root. Failure to follow these steps may result
      in packet loss and wasted resources along the source route path that
      is broken.
      </t>
      </section>



    <section anchor='spdao'><name>Storing-Mode Projected Route</name>


      <t>
      As illustrated in <xref target='sdf'/>, the Storing Mode route projection
      is used by the Root to install a routing state towards a Target in the
      routers along a segment between an ingress and an egress router;
      this enables the routers to forward along that segment any packet for
      which the next loose hop is the said Target, for Instance a loose source
      routed packet for which the next loose hop is the Target, or a packet for
      which the router has a routing state to the final destination via the Target.
      </t>
          <figure anchor='sdf'><name>Projecting a route</name>
            <artwork>
           ------+---------
                 |          Internet
                 |
              +-----+
              |     | Border Router
              |     |  (RPL Root)
              +-----+                      |     ^                   |
                 |                         | DAO | ACK               |
           o    o   o    o                 |     |                   |
       o o   o  o   o  o  o o   o          |  ^       | Projected    .
      o  o o  o o    o   o   o  o  o       |  | DAO   | Route        .
      o   o    o  o     o  o    o  o  o    | ^        |              .
     o  o   o  o   o         o   o o       v | DAO    v              .
     o          o   LLN   o   o     o                                |
         o o   o        o     o              Loose Source Route Path |
      o       o      o    o                 From Root To Destination v

      </artwork>
          </figure>


    <t>
     In order to install the relevant routing state along the segment between an
     ingress and an egress routers,
     the Root sends a unicast P-DAO message to the egress router of the routing
     segment that must be installed. The P-DAO message contains the ordered list
     of hops along the segment as a direct sequence of Via Information options
     that are preceded by one or more RPL Target options to which they relate.
     Each Via Information option contains a Path Lifetime for which the state is
     to be maintained.
     </t><t>
     The Root sends the P-DAO directly to the egress node of the segment.
     In that P-DAO, the destination IP address matches the Via Address in the
     last VIO. This is how the egress recognizes its role. In a similar fashion,
     the ingress node recognizes its role as it matches Via Address in the first
     VIO.
     </t><t>

     The egress node of the segment is the only node in the path that does not
     install a route in response to the P-DAO; it is expected to be already able
     to route to the Target(s) on its own. It may either be the Target, or may
     have some existing information to reach the Target(s), such as a connected
     route or an already installed Projected Route.
    <!-- If it cannot reach the Target, then the egress node may lookup the address on the relevant interfaces. -->
     If one of the Targets cannot be located, the node MUST answer to the Root
     with a negative DAO-ACK listing the Target(s) that could not be located
     (suggested status 10 to be confirmed by IANA).
    </t><t>
     If the egress node can reach all the Targets, then it forwards the P-DAO
     with unchanged content to its loose predecessor in the segment as indicated
     in the list of Via Information options, and recursively the message is propagated
     unchanged along the sequence of routers indicated in the P-DAO, but in the
     reverse order, from egress to ingress.
     </t><t>

     The address of the predecessor to be used as destination of the propagated
     DAO message is found in the Via Information option the precedes the one
     that contain the address of the propagating node, which is used as source
     of the packet.

    </t><t>
     Upon receiving a propagated DAO, an intermediate router as well as the
     ingress router install a route towards the DAO Target(s) via its
     successor in the P-DAO; the router locates the VIO that contains its
     address, and uses as next hop the address found in the Via Address field
     in the following VIO. The router MAY install additional routes towards the
     addresses that are located in VIOs that are after the next one, if any, but
     in case of a conflict or a lack of resource, a route to a Target installed
     by the Root has precedence.

    </t><t>
     The process recurses till the P-DAO is propagated to ingress router of
     the segment, which answers with a DAO-ACK to the Root.
     </t>
     <t>Also, the path indicated in a P-DAO may be loose, in which case the
     reachability to the next hop has to be asserted. Each router along the
     path indicated in a P-DAO is expected to be able to reach its successor,
     either with a connected route (direct neighbor), or by routing, for Instance
     following a route installed previously by a DAO or a P-DAO message.
     If that route is not connected then a recursive lookup may take place at
     packet forwarding time to find the next hop to reach the Target(s).
     If it does not and cannot reach the next router in the P-DAO,
     the router MUST answer to the Root with a negative DAO-ACK
     indicating the successor that is unreachable
     (suggested status 11 to be confirmed by IANA).
    </t>
    <t>
     A Path Lifetime of 0 in a Via Information option is used to clean up the
     state. The P-DAO is forwarded as described above, but the DAO
     is interpreted as a No-Path DAO and results in cleaning up existing state
     as opposed to refreshing an existing one or installing a new one.
    </t>
      <t>In case of a forwarding error along a Storing Mode Projected Route, the node
      that fails to forward SHOULD send an ICMP error with a code "Error in
      Projected Route" to the Root. Failure to do so may result in packet loss
      and wasted resources along the Projected Route that is broken.
      </t>
      </section>  <!-- "Storing-Mode Projected DAO" -->
    </section>  <!-- "Projected DAO" -->



    <section><name>Security Considerations</name>

	<t>This draft uses messages that are already present in RPL
     <xref target='RFC6550'/> with optional secured versions. The same secured
     versions may be used with this draft, and whatever security is deployed for
     a given network also applies to the flows in this draft.

	</t>
	<t> TODO: should probably consider how P-DAO messages could be abused by

    a) rogue nodes b) via replay of messages c) if use of P-DAO messages could in fact deal with any threats?

	</t>
</section>
<section anchor='IANAcon'><name>IANA Considerations</name>
   <section anchor='RPLCtrlMsgOptionsReg'><name>New RPL Control Codes</name>

    <t>This document extends the IANA registry created by RFC 6550 for RPL
    Control Codes as follows:</t>




        <table anchor="ianaRPLCtrlMsgtbl"><name>RPL Control Codes</name>
   <thead>
          <tr><th align='center'>Code</th>

          <th align='left'>Description</th>

          <th align='left'>Reference</th></tr>

   </thead><tbody>

          <tr><td align='center'>0x0A</td>

          <td align='left'>Via Information option</td>

          <td align='left'>This document</td></tr>

          <tr><td align='center'>0x0B</td>

          <td align='left'>Source-Routed Via Information option</td>

          <td align='left'>This document</td></tr>
   </tbody>
        </table>



    <t>This document is updating the registry created by RFC 6550 for the RPL
        3-bit Mode of Operation (MOP) as follows:
        </t>

        <table anchor="ianaMOPtbl"><name>DIO Mode of operation</name>
   <thead>

          <tr><th align='center'>MOP value</th>

          <th align='left'>Description</th>

          <th align='left'>Reference</th></tr>

   </thead><tbody>

          <tr><td align='center'>5</td>

          <td align='left'>Non-Storing mode of operation with Projected Routes</td>

          <td align='left'>This document</td></tr>

          <tr><td align='center'>6</td>

          <td align='left'>Storing mode of operation with Projected Routes</td>

          <td align='left'>This document</td></tr>
    </tbody>
        </table>

   </section> <!-- "New RPL Control Codes" -->
   <section anchor='ICMPv6ErrPRoute'><name>Error in Projected Route ICMPv6 Code</name>
        <t>In some cases RPL will return an ICMPv6 error message when a
        message cannot be forwarded along a Projected Route.
        This ICMPv6 error message is "Error in Projected Route".</t>

        <t>IANA has defined an ICMPv6 "Code" Fields Registry for ICMPv6
        Message Types. ICMPv6 Message Type 1 describes "Destination Unreachable"
        codes. This specification requires that a new code is allocated from the
        ICMPv6 Code Fields Registry for ICMPv6 Message Type 1, for "Error in
        Projected Route", with a suggested code value of 8, to be confirmed by
        IANA.</t>
   </section> <!--"ICMPv6: Error in a Projected Route" -->
</section> <!-- "IANA Considerations"-->


<section><name>Acknowledgments</name>
<t>The authors wish to acknowledge JP Vasseur, James Pylakutty and
   Patrick Wetterwald for their contributions to the ideas developed here.</t>
</section>

    </middle>
    <back>

   <displayreference   target="I-D.pthubert-raw-problem-statement"     to="RAW-PS"/>
   <displayreference   target="I-D.ietf-6tisch-architecture"           to="6TiSCH-ARCHI"/>
    <references><name>Normative References</name>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4443.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6550.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6554.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8025.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8138.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml'/>


    </references>
    <references><name>Informative References</name>

	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7102.xml'/>
	   <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6997.xml'/>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-6tisch-architecture.xml'/>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.pthubert-raw-problem-statement.xml'/>

	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8655.xml'/>
      <reference anchor='PCE' target='https://datatracker.ietf.org/doc/charter-ietf-pce/'>
         <front>
            <title>Path Computation Element</title>
            <author>
               <organization>IETF</organization>
            </author>
            <date/>
         </front>
      </reference>

    </references>
	<section><name>Applications</name>
      <section><name>Loose Source Routing in Non-storing Mode</name>

	  <t>A RPL implementation operating in a very constrained LLN typically uses
      the Non-Storing Mode of Operation as represented in <xref target='nost'/>.
      In that mode, a RPL node indicates a
      parent-child relationship to the Root, using a Destination Advertisement
      Object (DAO) that is unicast from the node directly to the Root,
      and the Root typically builds a source routed path to a destination down
      the DODAG by recursively concatenating this information.
      </t>

          <figure anchor='nost'><name>RPL non-storing mode of operation </name>
            <artwork>
           ------+---------
                 |          Internet
                 |
              +-----+
              |     | Border Router
              |     |  (RPL Root)
              +-----+                      ^     |        |
                 |                         | DAO | ACK    |
           o    o   o    o                 |     |        | Strict
       o o   o  o   o  o  o o   o          |     |        | Source
      o  o o  o o    o   o   o  o  o       |     |        | Route
      o   o    o  o     o  o    o  o  o    |     |        |
     o  o   o  o   o         o   o o       |     v        v
     o          o             o     o
                       LLN
                       </artwork>
          </figure>
    <t>
      Based on the parent-children relationships expressed in the non-storing
      DAO messages,the Root possesses topological information about the whole
      network, though this information is limited to the structure of the DODAG
      for which it is the destination.
      A packet that is generated within the domain will always reach the Root,
      which can then apply a source routing information to reach the destination
      if the destination is also in the DODAG.
      Similarly, a packet coming from the outside of the domain for a destination
      that is expected to be in a RPL domain reaches the Root.
    </t>
    <t>
     It results that the Root, or then some associated centralized computation
     engine such as a PCE, can determine the amount of packets that reach a
     destination in the
     RPL domain, and thus the amount of energy and bandwidth that is wasted for
     transmission, between itself and the destination, as well as the risk of
     fragmentation, any potential delays because of a paths longer than
     necessary (shorter paths exist that would not traverse the Root).
    </t>
     <t>
     As a network gets deep, the size of the source routing header that the
      Root must add to all the downward packets becomes an issue for nodes that
      are many hops away. In some use cases, a RPL network forms long lines and
      a limited amount of well-Targeted routing state would allow to make the
      source routing operation loose as opposed to strict, and save packet size.
      Limiting the packet size is directly beneficial to the energy budget, but,
      mostly, it reduces the chances of frame loss and/or packet fragmentation,
      which is highly detrimental to the LLN operation. Because the capability
      to store a routing state in every node is limited, the decision of which
      route is installed where can only be optimized with a global knowledge of
      the system, a knowledge that the Root or an associated PCE may possess by
      means that are outside of the scope of this specification.
      </t>

      <t>
      This specification enables to store source-routed or storing mode state in
      intermediate routers, which enables to limit the excursion of the source
      route headers in deep networks.
      Once a P-DAO exchange has taken place for a given Target, if the Root
      operates in non storing mode, then it may elide the sequence of routers
      that is installed in the network from its source route headers to
      destination that are reachable via that Target, and the source route
      headers effectively become loose.
      </t>

      </section>
    <section><name>Transversal Routes in storing and non-storing modes</name>

      <t>
      RPL is optimized for Point-to-Multipoint (P2MP) and Multipoint-to-Point
      (MP2P), whereby routes are always installed along the RPL DODAG
      respectively from and towards the DODAG Root. Transversal
      Peer to Peer (P2P) routes in a RPL network will generally suffer from some
      elongated (stretched) path versus the best possible path, since routing
      between 2 nodes always happens via a common parent, as illustrated in
      <xref target='stretch'/>:
        </t><ul spacing='normal'>
        <li> in non-storing mode, all packets
     routed within the DODAG flow all the way up to the Root of the DODAG. If
     the destination is in the same DODAG, the Root must encapsulate the packet
     to place a Routing Header that has the strict source route information down
     the DODAG to the destination. This will be the case even if the destination
     is relatively close to the source and the Root is relatively far off.
        </li>
        <li>In storing mode, unless the destination is a child of the source,
     the packets will follow the default route up the DODAG as well.
     If the destination is in the same DODAG, they will eventually reach a
     common parent that has a route to the destination; at worse, the common
     parent may also be the Root. From that common parent, the packet will
     follow a path down the DODAG that is optimized for the Objective Function
     that was used to build the DODAG.</li>
        </ul><t>
     </t>


       <figure anchor='stretch'><name>Routing Stretch between S and D via common parent X</name>
            <artwork>
                   ------+---------
                    |          Internet
                    |
                 +-----+
                 |     | Border Router
                 |     |  (RPL Root)
                 +-----+
                    X
              ^    v   o    o
          ^ o   o  v   o  o  o o   o
         ^  o o  o v    o   o   o  o  o
         ^   o    o  v     o  o    o  o  o
        S  o   o  o   D         o   o o
        o          o             o     o
                          LLN
       </artwork>
          </figure>


          <!--
      In NSM, all peer-to-peer routes travel all the way to the Root, which adds
      a source routing header and forwards the packet down to the destination,
      resulting in the longest stretch and overload of the radio bandwidth near
      the Root. A controller, for Instance collocated with the RPL Root, with
      enough topological awareness of the connectivity between nodes, would be
      able to compute more direct routes, avoiding the vicinity of the Root
      whenever possible.
      </t>

      	  <t>With the initial specifications of RPL  <xref target="RFC6550"/>, the
     P2P path from a source to a destination is often stretched

          -->
     <t>
     It results that it is often beneficial to enable transversal P2P routes,
     either if the RPL route presents a stretch from shortest path, or if the
     new route is engineered with a different objective.
     For that reason, earlier work at the IETF introduced the
     <xref target='RFC6997'>"Reactive Discovery of Point-to-Point Routes in
     Low Power and Lossy Networks"</xref>, which specifies a distributed method for
     establishing optimized P2P routes. This draft proposes an alternate based
     on a centralized route computation.
     </t>

        <figure anchor='opti2'><name>Projected Transversal Route</name>
            <artwork>
              ------+---------
                    |          Internet
                    |
                 +-----+
                 |     | Border Router
                 |     |  (RPL Root)
                 +-----+
                    |
              o    o   o    o
          o o   o  o   o  o  o o   o
         o  o o  o o    o   o   o  o  o
         o   o    o  o     o  o    o  o  o
        S&gt;&gt;A&gt;&gt;&gt;B&gt;&gt;C&gt;&gt;&gt;D         o   o o
        o          o             o     o
                          LLN
       </artwork>
          </figure>
            <t>
      This specification enables to store source-routed or storing mode state in
      intermediate routers, which enables to limit the stretch of a P2P route
      and maintain the characteristics within a given SLA. An example of service
      using this mechanism oculd be a control loop that would be installed in a
      network that uses classical RPL for asynchronous data collection. In that
      case, the P2P path may be installed in a different RPL Instance, with a
      different objective function.
      </t>
      </section>
      </section>




    <section><name>Examples</name>

        <section><name>Using storing mode P-DAO in non-storing mode MOP</name>
<t>
    In non-storing mode, the DAG Root maintains the knowledge of the whole DODAG
    topology, so when both the source and the destination
    of a packet are in the DODAG, the Root can determine the common
    parent that would have been used in storing mode, and thus the list of nodes
    in the path between the common parent and the destination. For Instance in
    the diagram shown in <xref target='exmp'/>, if the source is node 41
    and the destination is node 52, then the common parent is node 22.
    </t>
       <figure anchor='exmp'><name>Example DODAG forming a logical tree topology</name>
            <artwork>
           ------+---------
                 |          Internet
                 |
              +-----+
              |     | Border Router
              |     |  (RPL Root)
              +-----+
               | \  \____
              /   \       \
            o 11   o 12     o  13
           /       |       /  \
         o 22      o 23   o 24  o 25
        /  \       | \      \
      o 31   o 32  o   o     o 35
     /      /      |    \    |    \
    o 41   o 42    o     o   o 45   o 46
    |      |       |     |    \     |
    o 51   o 52    o 53  o     o 55 o 56

                       LLN
       </artwork>
          </figure>



    <t>
     With this draft, the Root can install a storing mode routing states along a
     segment that is either from itself to the destination, or from one or more
     common parents for a particular source/destination pair towards that
     destination (in this particular
     example, this would be the segment made of nodes 22, 32, 42).
    </t><!--t>
     If the predecessor can route to the successor node, then it installs a
     route to the Targets via the successor. If that route is not connected then
     a recursive lookup will take place to reach the Target(s). From there,
     the node strips the last Via Information option and either answers to the
     Root with a positive DAO-ACK that contains the list of Targets that could
     be routed to, or propagates the DAO to its own predecessor.
    </t-->
    <t> In the example below, say that there is a lot of traffic to nodes 55 and
    56 and the Root decides to reduce the size of routing headers to those
    destinations. The Root can first send a DAO to node 45 indicating Target 55
    and a Via segment (35, 45), as well as another DAO to node 46 indicating
    Target 56 and a Via segment (35, 46). This will save one entry in the
    routing header on both sides. The Root may then send a DAO to node 35
    indicating Targets 55 and 56 a Via segment (13, 24, 35) to fully optimize
    that path.</t>
    <t>
    Alternatively, the Root may send a DAO to node 45 indicating Target 55
    and a Via segment (13, 24, 35, 45) and then a DAO to node 46 indicating
    Target 56 and a Via segment (13, 24, 35, 46), indicating the same DAO
    Sequence.
    </t>
    <!--
    <t>
    It may happen that the nodes along the path do not have enough resources
    to store an additional route to the destination (node 46). As the Root has a
    complete knowledge of the DAG, some nodes may have more compute and storing
    resources so that they can be elected as specific nodes (it is the case of
    node 35 for Instance). Let's take the case where node
    45 send packets to node 56. node 46 is unable to store any route.

    </t><t>
    In this case the Root send the new DAO message to node 35 (well known node
    for its compute and storing capabilities) with the routing header to node
    56 (segment 35 - 46).

    </t><t>
    When 35 receives from its child a packet to node 56, it adds the routing
    header to node 56 in the packet header. In this case nothing changes for
    the node 46 acting as non storing mode.

    </t><t>
      The life time of the DAO may be dynamically changed by the Root.
      Once the routing state expires, and packets are router back to their
      original mode (through the Root), the Root may accordingly decide to
      refresh the state if the conditions that triggered the decision to install
      the state still holds, after potentially adjusting the life time.
    </t>
    -->


    </section>


    <section><name>Projecting a storing-mode transversal route</name>


   <t>In this example, say that a PCE determines that a path must be installed
   between node S and node D via routers A, B and C, in order to serve the needs
   of a particular application.
   </t><t>
   The Root sends a P-DAO with a Target option indicating the destination D and
   a sequence Via Information option, one for S, which is the ingress router of
   the segment, one for A and then for B, which are an intermediate routers, and
   one for C, which is the egress router.
   </t>
       <figure anchor='pdao2'><name>P-DAO from Root</name>
            <artwork>
              ------+---------
                    |          Internet
                    |
                 +-----+
                 |     | Border Router
                 |     |  (RPL Root)
                 +-----+
                    | P-DAO message to C
              o    |   o    o
          o o   o |    o  o  o o   o
         o  o o  | o    o   o   o  o  o
         o   o   V  o     o  o    o  o  o
        S  A  B  C   D         o   o o
        o          o             o     o
                          LLN
       </artwork>
          </figure>

   <t>Upon reception of the P-DAO, C validates that it can reach D, e.g. using
   IPv6 Neighbor Discovery, and if so, propagates the P-DAO unchanged to B.
   </t><t>
   B checks that it can reach C and of so, installs a route towards D via C.
   Then it propagates the P-DAO to A.
   </t><t>
   The process recurses till the P-DAO reaches S, the ingress of the segment,
   which installs a route to D via A and sends a DAO-ACK to the Root.
    </t>

          <figure anchor='pdao3'><name>P-DAO-ACK to Root</name>
            <artwork>
              ------+---------
                    |          Internet
                    |
                 +-----+
                 |     | Border Router
                 |     |  (RPL Root)
                 +-----+
                  ^ P-DAO-ACK from S
              /    o   o    o
           /   o o    o  o  o o   o
         |  o o  o o    o   o   o  o  o
         |   o   o  o     o  o    o  o  o
        S  A  B  C   D         o   o o
        o          o             o     o
                          LLN
       </artwork>
          </figure>

             <t>
   As a result, a transversal route is installed that does not need to follow
   the DODAG structure.
   </t>
       <figure anchor='opti'><name>Projected Transversal Route</name>
            <artwork>
              ------+---------
                    |          Internet
                    |
                 +-----+
                 |     | Border Router
                 |     |  (RPL Root)
                 +-----+
                    |
              o    o   o    o
          o o   o  o   o  o  o o   o
         o  o o  o o    o   o   o  o  o
         o   o    o  o     o  o    o  o  o
        S&gt;&gt;A&gt;&gt;&gt;B&gt;&gt;C&gt;&gt;&gt;D         o   o o
        o          o             o     o
                          LLN
       </artwork>
          </figure>
    </section>

    </section>
    </back>




</rfc>
