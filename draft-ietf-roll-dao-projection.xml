<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">


<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>
<?rfc authorship="yes"?>
<?rfc tocappendix="yes"?>
<rfc  xmlns:xi="http://www.w3.org/2001/XInclude" category="std" ipr='trust200902'
tocInclude="true" indexInclude="true" obsoletes="" updates="6554" consensus="true"
submissionType="IETF" xml:lang="en" version="3"
docName="draft-ietf-roll-dao-projection-19" >

<front>

   <title abbrev='DAO Projection'>Root initiated routing state in RPL</title>
   <author initials='P' surname='Thubert' fullname='Pascal Thubert' role='editor'>
      <organization abbrev='Cisco Systems'>Cisco Systems, Inc</organization>
      <address>
         <postal>
            <street>Building D</street>
            <street>45 Allee des Ormes - BP1200 </street>
            <city>Mougins - Sophia Antipolis</city>
            <code>06254</code>
          <country>France</country>
         </postal>
         <phone>+33 497 23 26 34</phone>
         <email>pthubert@cisco.com</email>
      </address>
   </author>

    <author fullname="Rahul Arvind Jadhav" initials="R.A." surname="Jadhav">
        <organization>Huawei Tech</organization>
        <address>
            <postal>
                <street>Kundalahalli Village, Whitefield,</street>
                <city>Bangalore</city>
                <region>Karnataka</region>
                <code>560037</code>
                <country>India</country>
            </postal>
            <phone>+91-080-49160700</phone>
            <email>rahul.ietf@gmail.com</email>
        </address>
    </author>

<author initials='M' surname='Gillmore' fullname='Matthew Gillmore'>
      <organization abbrev='Itron'>Itron, Inc</organization>
      <address>
         <postal>
            <street>Building D</street>
            <street>2111 N Molter Road</street>
            <city>Liberty Lake</city>
            <code>99019</code>
            <country>United States</country>
         </postal>
         <phone>+1.800.635.5461</phone>
         <email>matthew.gillmore@itron.com</email>
      </address>
   </author>

        <date/>

	<area>Routing</area>

	<workgroup>ROLL</workgroup>

        <abstract>
	  <t>
     This document extends RFC 6550 and RFC 6553 to enable a RPL Root to install and maintain Projected Routes within its DODAG, along a selected set of nodes that may or may not include self, for a chosen duration.
     This potentially enables routes
    that are more optimized or resilient than those obtained with the
    classical distributed operation of RPL, either in terms of the size of a
    Routing Header or in terms of path length, which impacts both the
    latency and the packet delivery ratio.
	  </t>
	</abstract>
    </front>

    <middle>

	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<section anchor='introduction'><name>Introduction</name>

	   <t> RPL, the <xref target='RFC6550'>
	 "Routing Protocol for Low Power and Lossy Networks"</xref> (LLNs),
    is a generic Distance Vector protocol that is well suited
    for application in a variety of low energy Internet of Things (IoT)
    networks.
    RPL forms Destination Oriented Directed Acyclic Graphs (DODAGs) in which
    the Root often acts as the Border Router to connect the RPL domain to the
    Internet. The Root is responsible to select the RPL Instance that is used
    to forward a packet coming from the Internet into the RPL domain and set
    the related RPL information in the packets. 6TiSCH uses RPL for its routing operations.
    </t>
    <t>

    The <xref target='RFC9030'>
    "6TiSCH Architecture"</xref> also leverages the <xref target='RFC8655'>
    "Deterministic Networking Architecture"</xref> centralized model
    whereby the device resources and capabilities are exposed to an external
    controller which installs routing states into the network based on some
    objective functions that reside in that external entity.  With DetNet and
    6TiSCH, the component of the controller that is responsible of computing
    routes is called a Path Computation Element (<xref target='PCE'/>).
    </t>
    <t>
    Based on heuristics of usage, path length, and knowledge of device capacity
    and available resources such as battery levels and reservable buffers, the
    PCE with a global visibility on the system can compute direct Peer to Peer
    (P2P) routes that are optimized for the needs expressed by an objective function.
    This document specifies protocol extensions to RPL <xref target='RFC6550'/>
    that enable the Root of a main DODAG to install centrally-computed routes  inside the DODAG on behalf of a PCE.
    </t>
    <t>
    This specification expects that the main RPL Instance is operated in RPL
    Non-Storing Mode of Operation (MOP) to sustain the exchanges with the Root.
    In that Mode, the
    Root has enough information to build a basic DODAG topology based on
    parents and children, but lacks the knowledge of siblings. This document
    adds the capability for nodes to advertise sibling information in order to
    improve the topological awareness of the Root.
    </t>
    <t>
    As opposed to the classical RPL operations where routes are injected by the
    Target nodes, the protocol extensions enable the Root of a DODAG to project
    the routes that are needed onto the nodes where they should be installed.
    This specification uses the term Projected Route to refer to those routes.
    Projected Routes can be used to reduce the size of the source routing
    headers with loose source routing operations down the main RPL DODAG.
    Projected Routes can also be used to build transversal routes for route
    optimization and Traffic Engineering purposes, between nodes of the DODAG.
    </t>
    <t>
    A Projected Route may be installed in either Storing and Non-Storing Mode,
    potentially resulting in hybrid situations where the Mode of the Projected
    Route is different from that of the main RPL Instance.
    A Projected Route may be a stand-alone end-to-end path or a Segment in a more complex forwarding graph called a Track.
    </t>
    <t>
    The concept of a Track was introduced in the 6TiSCH architecture, as a
    potentially complex path with redundant forwarding solutions along the way.
    With this specification, a Track is a DODAG formed by a RPL local Instance
    that is rooted at the Track Ingress.  If there is a single Track Egress,
    then the Track is reversible to form another DODAG by reversing the
    direction of each edge. A node at the ingress of more
    than one Segment in a Track may use one or more of these Segments to forward
    a packet inside the Track.
    </t>
    <t>
    The <xref target='I-D.pthubert-raw-architecture'>"Reliable and
    Available Wireless (RAW) Architecture/Framework"</xref> defines the Path Selection Engine (PSE) that adapts the use of the path redundancy within a Track to defeat the diverse causes of packet loss.
     </t>
    <t>
    The PSE is a dataplane extension of the PCE; it controls the forwarding
    operation of the packets within a Track, using Packet ARQ, Replication,
    Elimination, and Overhearing (PAREO) functions over the Track segments, to
    provide a dynamic balance between the reliability and availability
    requirements of the flows and the need to conserve energy and spectrum.
    </t>
    <t>
    The time scale at which the PCE (re)computes the Track can be long,
    using long-term statistical metrics to perform global optimizations at the
    scale of the whole network. Conversely, the PSE makes forwarding decisions
    at the time scale of one or a small collection of packets, based on a
    knowledge that is limited in scope to the Track itself, so it can be
    refreshed at a fast pace.
	 </t>
    <t>
    Projected Routes must be used with the parsimony to limit the amount of
    state that is installed in each device to fit within the device resources,
    and to maintain the amount of rerouted traffic within the capabilities of
    the transmission links. The methods used to learn the node capabilities and
    the resources that are available in the devices and in the network are out
    of scope for this document.
    </t>
    <t>
    This specification uses the RPL Root as a proxy to the PCE. The PCE may be
    collocated with the Root, or may reside in an external Controller.

     </t>
    <t>
    In that case, the PCE exchanges control messages with the Root over a
    Southbound API that is out of scope for this specification.
    The algorithm to compute the paths and the protocol used by an external PCE
    to obtain the topology of the network from the Root are also out of scope.
    </t>
    </section>

	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->

<section><name>Terminology</name>
<section anchor='bcp'><name>Requirements Language</name>
<t>

    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
    "OPTIONAL" in this document are to be interpreted as described in BCP 14
    <xref target='RFC2119'/><xref target='RFC8174'/> when, and only when, they
    appear in all capitals, as shown here.

</t>
</section>	<!-- end section "Requirements Language" -->



<section anchor='gloss'><name>Glossary</name>
    <t> This document often uses the following acronyms:
       </t><dl spacing='compact'>
       <dt>CMO:</dt><dd> Control Message Option</dd>
       <dt>DAO:</dt><dd> Destination Advertisement Object</dd>
       <dt>DAG:</dt><dd> Directed Acyclic Graph </dd>
       <dt>DODAG:</dt><dd> Destination-Oriented Directed Acyclic Graph; A DAG
       with only one vertex (i.e., node) that has no outgoing edge (i.e., link)
       </dd>
       <dt>LLN:</dt><dd> Low-Power and Lossy Network </dd>
       <dt>MOP:</dt><dd> RPL Mode of Operation</dd>
       <dt>P-DAO:</dt><dd> Projected DAO </dd>
       <dt>P-Route:</dt><dd> Projected Route </dd>
       <dt>PDR:</dt><dd> P-DAO Request </dd>
       <dt>RAN:</dt><dd> RPL-Aware Node (either a RPL Router or a RPL-Aware Leaf)</dd>
       <dt>RAL:</dt><dd> RPL-Aware Leaf </dd>
       <dt>RH:</dt><dd> Routing Header </dd>
       <dt>RPI:</dt><dd> RPL Packet Information </dd>
       <dt>RTO:</dt><dd> RPL Target Option</dd>
       <dt>RUL:</dt><dd> RPL-Unaware Leaf </dd>
       <dt>SIO:</dt><dd> RPL Sibling Information Option</dd>
       <dt>SR-VIO:</dt><dd> A Source-Routed Via Information Option, used in Non-Storing-Mode P-DAO messages.    </dd>
       <!--
       <dt>SubDAG:</dt><dd> A DODAG rooted at a node which is a child of that
       node and a subset of a larger DAG</dd> -->
       <dt>TIO:</dt><dd> RPL Transit Information Option</dd>
       <dt>SF-VIO:</dt><dd> A Via Information Option, used in Storing-Mode P-DAO messages.    </dd>
       <dt>VIO:</dt><dd> A Via Information Option; it can be a SF-VIO or an SR-VIO.    </dd>
       </dl>

</section>	<!-- Glossary -->

<section anchor='new'><name>Other Terms</name>
    <t>
    <!-- Removed reference from routing and 6tisch here to keep it simple
	 This specification introduces the following terminology:-->
    </t><dl spacing='compact'>

    <dt>Projected Route:</dt><dd>
	A RPL Projected Route is a RPL route that is computed remotely by a PCE, and installed and maintained by a RPL Root on behalf of the PCE.</dd>
    <dt>Segment:</dt><dd>
    A strict sequence of node along which a route is installed.
    With this specification, a Segment is installed by the Root of the main DODAG using Storing-Mode P-DAO messages.
    </dd>
    <dt>Projected DAO:</dt><dd> A DAO message used to install a Projected Route. </dd>
    <dt>Track:</dt><dd>
    A DODAG that provides a complex path from or to a Root that is the destination
    of the DODAG. The Root is the Track Ingress, and the forward direction for packets is down the DODAG, from the Track Ingress to one of the possibly multiple Track Egress Nodes.
    The DODAG may be strictly connected, meaning that the vertices are adjacent, or loosely connected, meaning that the vertices are connected using Segments that are associated to the same Track.
    With this specification, a Track is installed by the Root of the main DODAG using Non-Storing-Mode P-DAO messages.
    </dd>
    <dt>TrackID:</dt><dd>
    A RPL Local InstanceID with the D bit set to 0. The TrackID is associated with the IPv6 Address of the Track Ingress that is used to signal the DODAG Root, and together they form a unique identification of the Track
    (see the definition of DODAGID in section 2 of <xref target='RFC6550'/>.
    </dd>
    </dl>
</section>	<!-- end section "Other Terms" -->


  <section anchor='lo'><name>References</name>
    <t>
	In this document, readers will encounter terms and concepts
	that are discussed in the <xref target='RFC6550'>"Routing Protocol for Low Power and Lossy Networks"</xref> and
    <xref target='RFC7102'>"Terminology in Low power And Lossy Networks"</xref>.
    </t>
  </section>	<!-- end section "References" -->

</section>	<!-- end section "Terminology"



-->



    <section anchor='ext6550'><name>Extending RFC 6550</name>
    <section anchor='extP-DAO'><name>Projected DAO</name>


   <t>
   Section 6 of <xref target='RFC6550'/> introduces the RPL Control Message
   Options (CMO), including the RPL Target Option (RTO) and Transit Information
   Option (TIO), which can be placed in RPL messages such as the Destination Advertisement Object (DAO).
   This specification extends the DAO message with the Projected DAO (P-DAO); a
   P-DAO message signals a Projected Route to one or more Targets using the new
   CMOs presented therein. This specification enables to combine one or more
   Projected Routes into a DODAG called a Track, that is traversed to reach the
   Targets.
   </t>
   <t>
   The Track is assimilated with the DODAG formed for a Local RPL Instance.
   The local RPLInstanceID of the Track is called the TrackID, more in
   <xref target='trkid'/>. A P-DAO message for a Track signals the TrackID in
   the RPLInstanceID field. The Track Ingress is signaled in the DODAGID field
   of the Projected DAO Base Object; that field is elided in the case of the
   main RPL Instance. The Track Ingress is the Root of the Track, as shown in
   <xref target='p-dao-fmt'/>.
   </t>
   <t>
   This specification defines the new  "Projected DAO" (P) flag.
   The 'P' flag is encoded in bit position 2 (to be confirmed by IANA) of the Flags field in the
   DAO Base Object. The Root MUST set it to 1 in a Projected DAO message.
   Otherwise it MUST be set to 0. It is set to 0 in legacy implementations as
   specified respectively in Sections 20.11 and 6.4 of <xref target='RFC6550'/>.
.  </t>

<figure anchor='p-dao-fmt'><name>Projected DAO Base Object</name>
              <artwork align="center">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    TrackID    |K|D|P|  Flags  |   Reserved    | DAOSequence   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
+                                                               +
|                                                               |
+               IPv6 Address of the Track Ingress               +
|                                                               |
+                                                               +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Option(s)...
+-+-+-+-+-+-+-+-+
 </artwork>
</figure>


  <t> New fields:</t>
  <dl  spacing='normal'>

  <dt>TrackID:</dt>
    <dd> In the case of a P-DAO, the RPLInstanceID field is called TrackID.
    This is a naming convenience but does not change the semantics and format of
    the RPLInstanceID that is used as TrackID.
    </dd>

  <dt>P:</dt>
    <dd> <t>1-bit flag (position to be confirmed by IANA).</t>
          <t>
          The 'P' flag is set to 1 by the Root to signal a Projected DAO,
          and it is set to 0 otherwise.
          </t>
          </dd>

  </dl>

  <t>
   In RPL Non-Storing Mode, the TIO and RTO are combined in a DAO message to
   inform the DODAG Root of all the edges in the DODAG, which are formed by the
   directed parent-child relationships.
   Options may be factorized; multiple RTOs may be present to signal a collection of children that can be reached via the parent(s) indicated in the TIO(s) that follows the RTOs.
   This specification generalizes the case of a parent that can be used to reach a child with that of a whole Track through which both children and siblings of the Track Egress are reachable.
   </t>
  <t>
   New CMOs called the Via Information Options (VIO) are introduced for use in
   P-DAO messages as a multihop alternative to the TIO. One VIO is the Stateful VIO (SF-VIO); the SF-VIO installs Storing-Mode Projected Route along a strict segment. The other is the Source-Routed VIO (SR-VIO); the SR-VIO installs a Non-Storing-Mode Projected Route at the Track Ingress, which uses that state to encapsulate a packet with a Routing Header (RH) to the Track Egress.
   </t>
   <t>
   Like in a DAO message, the RTOs can be factorized in a P-DAO, but the Via Information Options cannot.
   A P-DAO contains one or more RTOs that indicate the destinations that can be
   reached via the Track, and exactly one VIO that signals a sequence of nodes.
   In Non-Storing Mode, the Root sends the P-DAO to the Track Ingress where the source-routing state is stored. In Storing Mode, the P-DAO is sent to the Track Egress and forwarded along the Segment in the reverse direction, installing a Storing Mode state to the Track Egress at each hop. In both cases the Track Ingress is the owner of the Track, and it generates the P-DAO-ACK when the installation is successful.
   </t>





    </section> <!-- Projected DAO -->
    <section anchor='extSIO'><name>Sibling Information Option</name>
   <t>
   This specification adds another CMO called the Sibling Information Option (SIO) that is used by a RPL Aware Node (RAN) to advertise a selection of its candidate neighbors as siblings to the Root, more in <xref target='rplsib'/>.
   The sibling selection process is out of scope. The expectation is that a node reports a Sibling Address in a SIO based on an active address registration <xref target="RFC8505"/> from that sibling for that address with the 'R' flag not set in the EARO. The node may assess the liveliness of the sibling at any time by performing a registration for one of its own addresses, either a link local or a global one, depending on whether the node expects the sibling to perform a matching advertisement in its own SIO.
   </t>

    </section> <!-- Sibling Information Option -->
    <section anchor='extPDR'><name>P-DAO Request</name>
   <t>
   Two new RPL Control Messages are also introduced, to enable a RAN
   to request the establishment of a Track between self as the Track Ingress
   Node and a Track Egress.
   The RAN makes its request by sending a new P-DAO Request (PDR) Message to
   the Root. The Root confirms with a new PDR-ACK message back to the requester
   RAN, see <xref target='P-DAOreq'/> for more. A positive PDR-ACK indicates that
   the Track was built and that the Roots commits to maintain the Track for the
   negotiated lifetime.
   In the case of a complex Track, each Segment is maintained independently and
   asynchronously by the Root, with its own lifetime that may be shorter, the
   same, or longer than that of the Track. The Root may use an asynchronous
   PDR-ACK with an negative status to indicate that the Track was terminated before its time.
   </t>
    </section><!-- P-DAO Request -->

    <section anchor='extRPI'><name>Extending the RPI</name>
         <t>
     Sending a Packet within a RPL Local Instance requires the presence of the abstract RPL Packet Information (RPI) described in section 11.2. of <xref target='RFC6550'/> in the outer IPv6 Header chain (see <xref target='RFC9008'/>). The RPI carries a local RPLInstanceID which, in association with either the source or the destination address in the IPv6 Header, indicates the RPL Instance that the packet follows.

    </t>    <t>
    This specification extends <xref target='RFC6550'/> to create a new flag that signals that a packet is forwarded along a projected route.

    </t>
    <dl>
       <dt> Projected-Route 'P':</dt><dd> 1-bit flag. It is set to 1 if this packet is sent over a projected route and set to 0 otherwise.</dd>
    </dl>
    </section> <!-- Extending the RPI -->
  </section> <!-- Extending RFC 6550 -->


    <section anchor='ext6553'><name>Extending RFC 6553</name>
    <t>
    <xref target='RFC6553'>"The RPL Option for Carrying RPL Information in Data-Plane Datagrams"</xref>describes the RPL Option for use among RPL routers to include the abstract RPL Packet Information (RPI) described in section 11.2. of <xref target='RFC6550'/> in data packets.

    </t>    <t>

    The RPL Option is commonly referred to as the RPI though the RPI is really the abstract information that is transported in the RPL Option. <xref target='RFC9008'/> updated the Option Type from 0x63 to 0x23.

    </t>    <t>

    This specification modifies the RPL Option to encode the 'P' flag as follows:
    </t>
<figure anchor='Rpifmt'><name>Extended RPL Option Format</name>
              <artwork align="center">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
                                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                |  Option Type  |  Opt Data Len |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|O|R|F|P|0|0|0|0| RPLInstanceID |          SenderRank           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         (sub-TLVs)                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 </artwork>
</figure>

          <dl spacing='normal'>
              <dt>Option Type:</dt><dd>0x23 or 0x63, see <xref target='RFC9008'/>
              </dd>
              <dt>Opt Data Len:</dt><dd> See <xref target='RFC6553'/>
              </dd>
              <dt>'O', 'R' and 'F' flags:</dt><dd> See <xref target='RFC6553'/>.
              Those flags MUST be set to 0 by the sender and ignored by the receiver if the 'P' flag is set.
              </dd>
              <dt> Projected-Route 'P':</dt><dd> 1-bit flag as defined in <xref target='extRPI'/>.
              </dd>
              <dt>RPLInstanceID:</dt><dd> See <xref target='RFC6553'/>. Indicates the TrackId if the 'P' flag is set.
              </dd>
              <dt>SenderRank:</dt><dd> See <xref target='RFC6553'/>. This field MUST be set to 0 by the sender and ignored by the receiver if the
           'P'flag is set.
              </dd>

            </dl>

    </section> <!-- Extending RFC 6553 -->
    <section anchor='ext8138'><name>Extending RFC 8138</name>

    <t>Section 6.3 of <xref target='RFC8138'/> presents the formats of the
     6LoWPAN Routing Header of type 5 (RPI-6LoRH) that compresses the RPI for normal RPL operation. The format of the RPI-6LoRH is not suited for Projected routes since the O,R,F flags are not used and the Rank is unknown and ignored.
    </t><t>
    This specification introduces a new 6LoRH, the P-RPI-6LoRH, with a type of 7.
    The P-RPI-6LoRH header is usually a a Critical 6LoWPAN Routing Header,  but it can be elective as well if an SRH-6LoRH is present and controls the routing decision.
    </t><t>
    The P-RPI-6LoRH is designed to compress the RPI along RPL Projected Routes.
    It sformat is as follows:
    </t>


<figure anchor='PRpifmt'><name>P-RPI-6LoRH Format</name>
              <artwork align="center">
     0                   1                   2
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |1|0|E| Length  | 6LoRH Type 7  | RPLInstanceID |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 </artwork>
</figure>
          <dl spacing='normal'>
              <dt> Elective 'E':</dt><dd> See <xref target='RFC8138'/>. The 'E' flag is set to 1 to indicate an Elective 6LoRH, meaning that it can be ignored when forwarding.
              </dd>

            </dl>

    </section> <!-- Extending RFC 8138 -->

    <section anchor='rplccmo'><name>New RPL Control Messages and Options</name>

    <section anchor='P-DAOreq'><name>New P-DAO Request Control Message</name>

               <t>
    The P-DAO Request (PDR) message is sent by a Node in the main DODAG to the Root.
    It is a request to establish or refresh a Track where this node is Track Ingress.
    The source IPv6 address of the PDR signals the Track Ingress of the requested Track,
    and the TrackID is indicated in the message itself.
    One and only one RPL Target Option MUST be present in the message.
    The RTO signals the Track Egress, more in <xref target='req'/>.
    <!--
    TODO: A P-DAO parameter option MAY be present as well to provide additional
    information on the requested path.
    -->
    </t>
    <t>
    The RPL Control Code for the PDR is 0x09, to be confirmed by IANA.
    The format of PDR Base Object is as follows:
    </t>

<figure anchor='disupdfmt'><name>New P-DAO Request Format</name>
              <artwork align="center">
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TrackID     |K|R|   Flags   |  ReqLifetime  | PDRSequence   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Option(s)...
 +-+-+-+-+-+-+-+-+
 </artwork>
</figure>

          <dl spacing='normal'>
              <dt>TrackID:</dt><dd>8-bit field indicating the RPLInstanceID
              associated with the Track.
              </dd>
              <dt>K:</dt><dd>The 'K' flag is set to indicate that the recipient
              is expected to send a PDR-ACK back.
              </dd>
              <dt>R:</dt><dd>The 'R' flag is set to request a Complex Track
              for redundancy.
              </dd>
              <dt>Flags:</dt><dd>Reserved. The Flags field MUST initialized to zero by the sender and MUST be ignored by the receiver
              </dd>
              <dt>ReqLifetime:</dt><dd> <t>8-bit unsigned integer.
              The requested lifetime for the Track expressed in Lifetime Units
              (obtained from the DODAG Configuration option).
              </t><t>
              A PDR with a fresher
              PDRSequence refreshes the lifetime, and a PDRLifetime of 0
              indicates that the track should be destroyed.
              </t>
              </dd>
              <dt>PDRSequence:</dt><dd>
              <t>8-bit wrapping sequence number,
              obeying the operation in section 7.2 of
              <xref target='RFC6550'/>.
              The PDRSequence is used to correlate a PDR-ACK message with the
              PDR message that triggered it. It is incremented at each PDR
              message and echoed in the PDR-ACK by the Root.
              </t>
              </dd>

            </dl>

    </section> <!-- New P-DAO Request Control Message -->

    <section anchor='rpldisackl'><name>New PDR-ACK Control Message</name>
    <t>
    The new PDR-ACK is sent as a response to a PDR message with the 'K' flag
    set.
    The RPL Control Code for the PDR-ACK is 0x0A, to be confirmed by IANA.
    Its format is as follows:
    </t>

<figure anchor='disackfmt'><name>New PDR-ACK Control Message Format</name>
              <artwork align="center">

 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    TrackID    |     Flags     | Track Lifetime|  PDRSequence  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| PDR-ACK Status|                Reserved                       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Option(s)...
+-+-+-+-+-+-+-+
 </artwork>
</figure>

          <dl spacing='normal'>
              <dt>TrackID:</dt><dd>
             The RPLInstanceID of the Track that was created. The value of 0x00 is used to when no Track was created.
              </dd>

              <dt>Flags:</dt><dd>Reserved. The Flags field MUST initialized to zero by the sender and MUST be ignored by the receiver
              </dd>

              <dt>Track Lifetime:</dt><dd>
             Indicates that remaining Lifetime for the Track, expressed in
             Lifetime Units; the value of zero (0x00)
              indicates that the Track was destroyed or not created.
              </dd>

              <dt>PDRSequence:</dt><dd> 8-bit wrapping sequence number.
              It is incremented at each PDR message and echoed in the PDR-ACK.
              </dd>


              <dt>PDR-ACK Status:</dt><dd> <t>8-bit field indicating
            the completion.
            The PDR-ACK Status is substructured as indicated in <xref target='rpst'/>:</t>



 <figure anchor='rpst' suppress-title='false'><name>PDR-ACK status Format</name>
       <artwork align="center" name="" type="" alt="">
    0 1 2 3 4 5 6 7
   +-+-+-+-+-+-+-+-+
   |E|R|  Value    |
   +-+-+-+-+-+-+-+-+
</artwork>
 </figure>


    <dl  spacing='compact'>
	<dt>E:</dt><dd> 1-bit flag. Set to indicate a rejection. When not set, the value of 0
    indicates Success/Unqualified acceptance and other values indicate "not an
    outright rejection".</dd>
	<dt>R:</dt><dd> 1-bit flag. Reserved, MUST be set to 0 by the sender and
    ignored by the receiver.</dd>
	<dt>Status Value:</dt><dd> 6-bit unsigned integer. Values depending on the
    setting of the 'E' flag, see
    <xref target='iana-ack-status'/> and <xref target='iana-nack-status'/>.
    </dd>

	</dl>

    </dd>

    <dt>Reserved:</dt><dd>The Reserved field MUST initialized to zero by the
    sender and MUST be ignored by the receiver
    </dd>

	</dl>

    </section> <!-- New PDR-ACK Control Message -->


     <section anchor='rplrpo'><name>Via Information Options</name>

    <t>A VIO signals the ordered list of IPv6 Via Addresses that constitutes the hops of either a Serial Track or a Segment of a more Complex Track.
    A VIO MUST contain at least one Via Address, and a Via Address MUST NOT be
    present more than once, otherwise the VIO MUST be ignored.
    The format of the Via Information Options is as follows:
    </t>
<figure anchor='viao'><name>VIO format (uncompressed form)</name>
              <artwork align="center">
     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |   Type        | Option Length |     Flags     |   SegmentID   |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |Segm. Sequence | Seg. Lifetime |      SRH-6LoRH header         |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    +                                                               +
    .                                                               .
    .                     Via Address 1                             .
    .                                                               .
    +                                                               +
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    .                              ....                             .
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    +                                                               +
    .                                                               .
    .                     Via Address n                             .
    .                                                               .
    +                                                               +
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 </artwork>
</figure>

          <dl spacing='normal'>
              <dt>Option Type:</dt><dd>0x0B for SF-VIO, 0x0C for SR-VIO
                                     (to be confirmed by IANA)</dd>

              <dt>Option Length:</dt><dd>In bytes; variable, depending on the number of Via Addresses and the compression.</dd>


              <dt>SegmentID:</dt><dd>8-bit field that identifies a Segment
               within a Track or the main DODAG as indicated by the TrackID field. The value of 0 is used to signal a Serial Track, i.e., made of a single segment.
              </dd>


              <dt>Segment Sequence:</dt><dd>
              <t>8-bit unsigned integer.
              The Segment Sequence obeys the operation in section 7.2 of
              <xref target='RFC6550'/> and the lollipop starts at 255.
              </t><t>
              When the
              Root of the DODAG needs to refresh or update a Segment in a Track,
              it increments the Segment Sequence individually for that Segment.
              </t><t>
              The Segment information indicated in the VIO deprecates any state
              for the Segment indicated by the SegmentID within the indicated
              Track and sets up the new information.

              </t><t>
              A VIO with a Segment Sequence that is not as fresh as the current
              one is ignored.
              </t><t>
              A VIO for a given DODAGID with the same (TrackID,
              SegmentID, Segment Sequence) indicates a retry; it MUST NOT
              change the Segment and MUST be propagated or answered as the first
              copy.
              </t>
              </dd>

              <dt>Segment Lifetime:</dt><dd>
              <t>8-bit unsigned integer. The length
              of time in Lifetime Units (obtained from the Configuration
              option) that the Segment is usable.

              </t><t>
              The
              period starts when a new Segment Sequence is seen. The value of 255
              (0xFF) represents infinity. The value of zero (0x00)
              indicates a loss of reachability.

              </t><t>
              A P-DAO message that
              contains a VIO with a Segment Lifetime of
              zero is referred as a No-Path P-DAO in this document.
              </t>
              </dd>


              <dt>SRH-6LoRH header:</dt><dd>The first 2 bytes of the (first) SRH-6LoRH as shown in Figure 6 of <xref target='RFC8138'/>.
              A 6LoRH Type of 4 means that the VIA Addresses are provided in full with no compression.
              </dd>

              <dt>Via Address:</dt><dd>
              <t>An IPv6 address along the Segment.
              </t><t>
              In a SF-VIO, the list is a strict path between direct neighbors, from the Segment Ingress to Egress, both included. The router that processes an SF-VIO MAY create additional routing state towards the nodes after self via the node immediately after self in the SF-VIO, but in case of memory shortage the routes to the Targets have precedence since they are the ones that the router commits to store.</t><t>

              In an SR-VIO, the list includes the egress but not the ingress node.
              It starts at the first hop and ends at a Track Egress. In that
              case, the Track Egress MUST be considered as an implicit Target,
              so it MUST NOT be listed it in a RPL Target Option. The list in an
              SR-VIO may be loose, provided that each listed node has a path to
              the next listed node, e.g., via a segment or another Track.
              </t><t>
              In the case of a SF-VIO, or if <xref target='RFC8138'/> is not used in the data packets, then the Root MUST use
              only one SRH-6LoRH per Via Information Option, and the compression is the same for
              all the addresses, as shown in <xref target='viao'/>.
              </t><t>
              In case of an SR-VIO, and if <xref target='RFC8138'/> is in use in the main DODAG, then the Root SHOULD optimize the size of the SR-VIO; more than one SRH-6LoRH may be present, e.g., if the compression level changes inside the Segment and different SRH-6LoRH Types are required. The content of the SR-VIO starting at the first SRH-6LoRH header is thus verbatim the one that the Track Ingress places in the packet encapsulation to reach the Track Ingress.

              </t>
              </dd>
            </dl>
    </section> <!-- Via Information Options -->
    <section anchor='rplsib'><name>Sibling Information Option</name>

    <t>
    The Sibling Information Option (SIO) provides indication on siblings that
    could be used by the Root to form Projected Routes. One or more SIO(s) may be placed in the DAO messages that are sent to the Root in Non-Storing Mode.
    </t>
    <t>
    The format of the SIO is as follows:
    </t>
<figure anchor='siof'><name>Sibling Information Option Format</name>
              <artwork align="center">
     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |   Type        | Option Length |Comp.|B|D|Flags|    Opaque     |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |            Step of Rank       |          Reserved             |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    +                                                               +
    .                                                               .
    .       Sibling DODAGID (if the D flag not set)               .
    .                                                               .
    +                                                               +
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    +                                                               +
    .                                                               .
    .                     Sibling Address                           .
    .                                                               .
    +                                                               +
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 </artwork>
</figure>

          <dl spacing='normal'>
              <dt>Option Type:</dt><dd>0x0D (to be confirmed by IANA)</dd>

              <dt>Option Length:</dt><dd>In bytes, the size of the option.</dd>

              <dt>Compression Type:</dt><dd>3-bit unsigned integer. This is the
              SRH-6LoRH Type as defined in figure 7 in section 5.1 of
              <xref target='RFC8138'/> that corresponds to the compression used
              for the Sibling Address and its DODAGID if resent. The Compression
              reference is the Root of the main DODAG.
              </dd>
              <dt>Reserved for Flags:</dt><dd>MUST be set to zero by the sender
              and MUST be ignored by the receiver.
              </dd>
              <dt>B:</dt><dd>
              1-bit flag that is set to indicate that the connectivity to the sibling
              is bidirectional and roughly symmetrical. In that case, only one of the siblings may
              report the SIO for the hop. If 'B' is not set then the SIO only indicates connectivity
              from the sibling to this node, and does not provide information on the hop from this node
              to the sibling.

              </dd>
              <dt>D:</dt><dd>
              1-bit flag that is set to indicate that sibling belongs to the
              same DODAG. When not set, the Sibling DODAGID is indicated.

              </dd>

              <dt>Flags:</dt><dd>Reserved. The Flags field MUST initialized to zero by the sender and MUST be ignored by the receiver
              </dd>
              <dt>Opaque:</dt><dd>MAY be used to carry information that the node
              and the Root understand, e.g., a particular representation of the
              Link properties such as a proprietary Link Quality Information
              for packets received from the sibling. An industrial Alliance
              that uses RPL for a particular use / environment MAY redefine the
              use of this field to fit its needs.
              </dd>

              <dt>Step of Rank:</dt><dd>16-bit unsigned integer. This is the
              Step of Rank <xref target='RFC6550'/> as computed by the Objective
              Function between this node and the sibling.
              </dd>

              <dt>Reserved:</dt><dd>The Reserved field MUST initialized to zero
              by the sender and MUST be ignored by the receiver
              </dd>

              <dt>Sibling DODAGID:</dt><dd>2 to 16 bytes, the DODAGID of the
              sibling in a <xref target='RFC8138'/> compressed form as indicated
              by the Compression Type field. This field is present if and only
              if  the D flag is not set.
              </dd>
              <dt>Sibling Address:</dt><dd>2 to 16 bytes, an IPv6 Address of the
              sibling, with a scope that MUST be make it reachable from the Root,
              e.g., it cannot be a Link Local Address. The IPv6 address is
              encoded in the <xref target='RFC8138'/> compressed form
              indicated by the Compression Type field.
              </dd>
            </dl>               <t>
    An SIO MAY be immediately followed by a DAG Metric Container. In that case
    the DAG Metric Container provides additional metrics for the hop from the Sibling
    to this node.
    </t>
    </section> <!-- Sibling Information Option -->




    </section> <!-- New RPL Control Messages and Options -->

    <section anchor='P-DAO'><name>Projected DAO</name>

    <t>
    This draft adds a capability to RPL whereby the Root of a main DODAG installs
    a Track as a collection of Projected Routes, using a Projected-DAO (P-DAO) message to maintain each individual route. The P-DAO signals a collection of Targets in the RPL Target Option(s) (RTO). Those Targets can be reached via a sequence of routers indicated in a VIO.
    A P-DAO message MUST contain exactly one VIO, which is either a SF-VIO or an
    SR-VIO, and MUST follow one or more RTOs. There can be at most one such sequence of RTO(s) and an Via Information Option. A track is identified by a tuple DODAGID, TrackID and  each route within a Track is indexed by a SegmentID.
     </t> <t>
    A P-DAO MUST be sent from the address of the Root that serves as DODAGID for the main DODAG. It MUST be sent to a GUA or a ULA of either the ingress or the egress of the Segment, more below. If the 'K' Flag is present in the P-DAO, and unless the P-DAO does not reach it, the ingress of the Segment is the node that acknowledges the message, using a DAO-ACK that MUST be sent back to the address that serves as DODAGID for the main DODAG.
     </t> <t>
    Like a classical DAO message, a P-DAO causes a change of state only if it is
    "new" per section 9.2.2. "Generation of DAO Messages" of the <xref target='RFC6550'>
    RPL specification</xref>; this is determined using
    the Segment Sequence information from the VIO as opposed to the Path
    Sequence from a TIO. Also, a Segment Lifetime of 0 in a VIO indicates that the projected route associated to the Segment is to be removed.
     </t> <t>
    There are two kinds of operation for the Projected Routes, the Storing Mode
    and the Non-Storing Mode.
    </t><ul spacing='normal'>
     <li>
    The Non-Storing Mode is discussed in <xref target='nsP-DAO'/>. A Non-Storing
    Mode P-DAO carries an SR-VIO with the loose list of Via Addresses that forms a
    source-routed Segment to the Track Egress. The recipient of the P-DAO is the
    Track Ingress; it MUST install a source-routed state to the Track Egress and reply to the Root directly using a DAO-ACK message if requested to.
     </li>
    <li>
    The Storing Mode is discussed in <xref target='sP-DAO'/>.  A Storing Mode
    P-DAO carries a SF-VIO with the strict list of Via Addresses from the ingress to the egress of the Segment in the data path order.
    The routers listed in the Via Addresses, except the egress, MUST install a routing state to the Target(s) via the next Via Address in the SF-VIO.
    In normal operations, the P-DAO is propagated along the chain of Via Routers
    from the egress router of the path till the ingress one, which confirms the
    installation to the Root with a DAO-ACK message.
     </li>
     </ul>
    <t>In case of a forwarding error along a Projected Route, an ICMP error is
    sent to the Root with a new Code "Error in Projected Route"
    (See <xref target='ICMPv6ErrPRoute'/>).
    The Root can then modify or remove the Projected Route.
    The "Error in Projected Route" message has the same format as the
    "Destination Unreachable Message", as specified in RFC 4443
    <xref target='RFC4443'/>.
       </t> <t>
    The portion of the invoking packet that is sent back in the ICMP message
    SHOULD record at least up to the RH if one is present, and this hop of the
    RH SHOULD be consumed by this node so that the destination in
    the IPv6 header is the next hop that this node could not reach.
    if a 6LoWPAN Routing Header (6LoRH) <xref target='RFC8138'/> is used to
    carry the IPv6 routing information in the outer header then that whole
    6LoRH information SHOULD be present in the ICMP message.
       </t> <t>
    The sender and exact operation depend on the Mode and is described in
    <xref target='nsP-DAO'/> and <xref target='sP-DAO'/> respectively.
    </t>
    <!--t>
    Note: The Target of a route that is installed by a P-DAO is not necessarily
    inside the DODAG, though how the Root and the optional PCE obtain the
    additional topological information to compute other routes is out of scope
    for this document.
    </t-->

      <section anchor='req'><name>Requesting a Track</name>

      <t>
      A Node is free to ask the Root for a new Track for which it will be Ingress at any time.
      This is done with a PDR message, that indicates the desired TrackID and the duration for which the Track should be established. Upon a PDR, the Root MAY install the necessary Segments, in which case it answers with a PDR-ACK indicating the granted Track Lifetime.
      All the Segments MUST be of a same mode, either Storing or Non-Storing.
      All the Segments MUST be created with the same TrackID and the same DODAGID signaled in the P-DAO.
      </t>
      <t>
      The Root is free to design the Track as it wishes, and to change the Segments overtime to serve the Track as needed, without notifying the
      resquesting Node.
      The Segment Lifetime in the P-DAO messages does not need to be aligned to
      the Requested Lifetime in the PDR, or between P-DAO messages for different Segments. The Root may use shorter lifetimes for the Segments
      and renew them faster than the Track is, or longer lifetimes in which case it will need to tear down the Segments if the Track is not renewed.
      </t>
      <t>
      When the Track Lifetime that was returned in the PDR-ACK is close to elapse, the resquesting Node needs to resend a PDR using the TrackID in the PDR-ACK to extend the lifetime of the Track, else the Track will time out and the Root will tear down the whole structure.
      </t>
      <t>
      If the Track fails and cannot be restored, the
      Root notifies the resquesting Node asynchronously with a PDR-ACK
      with a Track Lifetime of 0, indicating that the Track has failed, and
      a PDR-ACK Status indicating the reason of the fault.
      </t>
      </section><!-- Requesting a Track  -->


     <section anchor='trkid'><name>Identifying a Track</name>

     <t>
     RPL defines the concept of an Instance to signal an individual
     routing topology but does not have a concept of an administrative
     distance, which exists in certain proprietary implementations to sort out
     conflicts between multiple sources of routing information within one
     routing topology.
     </t>
     <t>
     This draft leverages the RPL Instance model as follows:
     </t><ul spacing='normal'>
     <li>
     <t>
     The Root MAY use P-DAO messages to add better routes in the main (Global)
     Instance in conformance with the routing objectives in that Instance.
     To achieve this, the Root MAY install an Storing-Mode P-Route along a path down the main Non-Storing Mode DODAG. This enables a loose source routing and reduces the size of the Routing Header, see <xref target='loose'/>.
     </t>
     <t>
     When adding an Storing-Mode P-Route to the main RPL Instance, the Root MUST set the RPLInstanceID field of the P-DAO message (see section 6.4.1. of <xref target='RFC6550'/>) to the RPLInstanceID of the main DODAG, and MUST NOT use the DODAGID field. A Projected Route provides a longer match to the Target Address than the default route via the Root, so it is preferred.
     </t>
     <t>
     Once the Projected Route is installed, the intermediate nodes listed in the SF-VIO after first one (i.e. The ingress) can be elided from the RH in packets sent along the Segment signaled in the P-DAO. The resulting loose source routing header indicates (one of) the Target(s) as the next entry after the ingress.

     </t>
     </li>
     <li>
     <t>
     The Root MAY also use P-DAO messages to install a specific (say, Traffic Engineered) path as a Serial or as a Complex Track, to a particular endpoint that is the Track Egress. In that case, the Root MUST install a Local RPL Instance (see section 5 of <xref target='RFC6550'/>), and the Local RPLInstanceID is called TrackID.
          </t>
     <t>
     In that case, the TrackID MUST be unique for the Global Unique IPv6 Address (GUA) or Unique-Local Address (ULA) of the Track Ingress that serves as DODAGID for the Track. The Track Ingress owns the namespace of its TrackIDs, so it can pick any unused value to request a new Track with a PDR. The Root is aware of all the active Tracks, so it can also pick any unused value to form Tracks without a PDR. To avoid a collision of the Root and the Track Ingress picking the same value at the same time, it is RECOMMENDED that the Track Ingress starts allocating the ID value of the Local RPLInstanceID (see section 5.1. of <xref target='RFC6550'/>) used as TrackIDs with the value 0 incrementing, while the Root starts with 63 decrementing.

     </t>
     <t>
     This way, a Track is uniquely identified by the tuple (DODAGID, TrackID) where the TrackID is always represented with the D flag set to 0.
     </t>
     <t>
     The Track Egress Address and the TrackID MUST be signaled in the P-DAO message as shown in <xref target='p-dao-fmt'/>.
     </t>

     </li>


     </ul>
     </section><!-- Identifying a Track -->

      <section anchor='inst'><name>Installing a Track</name>

   <t>
   A Storing-Mode P-DAO contains an SF-VIO that signals the strict sequence of consecutive nodes to form a segment between a segment ingress and a segment egress (both included). It installs a route of a higher precedence along the segment towards the Targets indicated in the Target Options. The segment is included in a DODAG indicated by the P-DAO Base Object, that may be the one formed by the main RPL Instance, or a Track associated with a local RPL Instance. A Track Egress is signaled as a Target in the P-DAO, and as the last entry is an SF-VIO of a last segment towards that Egress.
   </t>
   <t>
   A Non-Storing-Mode P-DAO signals a strict or loose sequence of nodes between the Track Ingress (excluded) and a Track Egress (included). It installs a source-routed path of a higher precedence within the Track indicated by the P-DAO Base Object, towards the Targets indicated in the Target Options. The source-routed path requires a Source-Routing header which implies an encapsulation to add the SRH to an existing packet.
   </t>
   <t>
   The next entry in the sequence must be either a neighbor of the previous entry, or reachable as a Target via another Projected Route, either Storing or Non-Storing.
   If it is reachable over a Storing Mode Projected Route, the next entry in the loose sequence is the Target of a previous segment and the ingress of a next segment; the segments are associated with the same Track, which avoids the need of an encapsulation.
   Conversely, if it is reachable over a Non-Storing Mode Projected Route, the  next loose source routed hop of the inner Track is a Target of a previous Track and the ingress of a next Track, which requires a de- and a re-encapsulation.
  </t>
 <t>
   A Serial Track is installed by a single Projected Routes that signals the sequence of consecutive nodes, either in Storing or Non-Storing Mode. If can be a loose Non-Storing Mode Projected Route, in which case the next loose entry must recursively be reached over a Serial Track.
   </t>
   <t>
   A Complex Track can be installed as a collection of Projected Routes with the same DODAGID and Track ID. The Ingress of a Non-Storing Mode Projected Route must be the owner of the DODAGID. The Ingress of a Storing Mode Projected Route must be either the owner of the DODAGID, or the egress of a preceding Storing Mode Projected Route in the same Track. In the latter case, the Targets of the Projected Route must be Targets of the preceding Projected Route to ensure that
   they are visible from the track Ingress.
   </t>

    <section anchor='sP-DAO'><name>Storing-Mode P-Route</name>
    <t>
    Profile 1 extends RPL operation in a Non-Storing Mode network with
    Storing-Mode Projected Routes that install segments along the main DODAG
    and enable to loose source routing  between the Root and the targets.
    </t>

    <section anchor='isP-DAO'><name>Installing a Storing-Mode P-Route</name>
    <t>
    As illustrated in <xref target='sdf'/>, a P-DAO that carries a SF-VIO
    enables the Root to install a stateful route towards a collection of Targets
    along a Segment between a Track Ingress and a Track Egress using a
    projected DAO Message.

    </t>

      <figure anchor='sdf'><name>Projecting a route</name>
        <artwork>
        ------+---------
              |          Internet
              |
           +-----+
           |     | Border Router
           |     |  (RPL Root)
           +-----+                      |     ^                   |
              |                         | DAO | ACK               |
        o    o   o    o                 |     |                   |
    o o   o  o   o  o  o o   o          |  ^       | Projected    .
   o  o o  o o    o   o   o  o  o       |  | DAO   | Route        .
   o   o    o  o     o  o    o  o  o    | ^        |              .
  o  o   o  o   o         o   o o       v | DAO    v              .
  o          o   LLN   o   o     o                                |
      o o   o        o     o              Loose Source Route Path |
   o       o      o    o                 From Root To Destination v
    </artwork>
         </figure>


    <t>
     In order to install the relevant routing state along the Segment ,
     the Root sends a unicast P-DAO message to the Track Egress router of the routing Segment that is being installed. The P-DAO message contains a SF-VIO with the direct sequence of Via Addresses. The SF-VIO follows
     one or more RTOs indicating the Targets to which the Track leads. The SF-VIO contains a Segment Lifetime for which the state is to be maintained.
     </t><t>
     The Root sends the P-DAO directly to the egress node of the Segment.
     In that P-DAO, the destination IP address matches the last Via Address in the SF-VIO. This is how the egress recognizes its role. In a similar fashion,
     the ingress node recognizes its role as it matches first Via Address in the SF-VIO.
     </t><t>
     The Egress node of the Segment is the only node in the path that does not
     install a route in response to the P-DAO; it is expected to be already able
     to route to the Target(s) on its own.
     If one of the Targets is not known, the node MUST answer to the Root
     with a negative DAO-ACK listing the Target(s) that could not be located
     (suggested status 10 to be confirmed by IANA).
    </t><t>
     If the egress node can reach all the Targets, then it forwards the P-DAO
     with unchanged content to its loose predecessor in the Segment as indicated
     in the list of Via Information options, and recursively the message is propagated
     unchanged along the sequence of routers indicated in the P-DAO, but in the
     reverse order, from egress to ingress.
     </t><t>

     The address of the predecessor to be used as destination of the propagated
     DAO message is found in the Via Address the precedes the one
     that contain the address of the propagating node, which is used as source
     of the message.

    </t><t>
     Upon receiving a propagated DAO, all except the Egress Router MUST install a route towards the DAO Target(s) via their successor in the SF-VIO. The router MAY install additional routes towards the
     VIA Addresses that are the SF-VIO after the next one, if any, but
     in case of a conflict or a lack of resource, the route(s) to the Target(s) have precedence.
     </t>
     <t>
     If a router cannot reach its predecessor in the SF-VIO,
     the router MUST answer to the Root with a negative DAO-ACK
     indicating the successor that is unreachable
     (suggested status 11 to be confirmed by IANA).
    </t>
    <t>
     The process continues till the P-DAO is propagated to ingress router of
     the Segment, which answers with a DAO-ACK to the Root. The Root always
     expects a DAO-ACK, either from the Track Ingress with a positive status
     or from any node along the segment with a negative status. If the DAO-ACK
     is not received, the Root may retry the DAO with the same TID, or tear
     down the route.
    </t>

    </section>  <!-- Installing a Storing-Mode P-Route -->

    <section anchor='issuesP-DAO'><name>Maintaining and Tearing Down a
          Storing-Mode P-Route</name>
    <t>
     A Segment Lifetime of 0 in a VIO is used to clean up the state. The P-DAO
     is forwarded as described above, but the DAO is interpreted as a No-Path
     DAO and results in cleaning up existing state as opposed to refreshing an
     existing one or installing a new one.
    </t>
    <t>
     Note that the continuity of the segment may be broken; this happens if the
     bidirectional connectivity between contiguous hops of the segment is lost.
     In that case the Root needs to send the projected DAO to one or more
     intermediate node(s) as opposed to the egress node, indicating a portion
     of segment that is being replaced or cleaned up. At the extreme, the P-DAO
     updates only one node, in which case it contains only one VIO.
    </t>
     <t>In case of a forwarding error along an Storing-Mode P-Route, the node
     that fails to forward SHOULD send an ICMP error with a code "Error in
     Projected Route" to the Root. Failure to do so may result in packet loss
     and wasted resources along the Projected Route that is broken.
     </t>

    </section>  <!-- Maintaining and Tearing Down a Storing-Mode P-Route -->

    </section>  <!-- Storing-Mode P-Route -->



    <section anchor='nsP-DAO'><name>Non-Storing-Mode P-Route</name>

    <t>
    As illustrated in <xref target='nsdf'/>, a P-DAO that carries an SR-VIO
    enables the Root to install a source-routed path from a Track Ingress towards
    a Target along the main DODAG.
    </t>

          <figure anchor='nsdf'><name>Projecting a Non-Storing Route</name>
            <artwork>
           ------+---------
                 |          Internet
                 |
              +-----+
              |     | Border Router
              |     |  (RPL Root)
              +-----+                    |  P  ^ ACK
                 |        Track          | DAO |
           o    o   o  o  Ingress X      V     |   X
       o o   o  o   o  o     o   X   o             X Source
      o  o o  o o    o   o  o    X  o  o           X Routed
      o   o    °  o     o   o   o X     o          X Segment
     o  o   o  o   o  o    o  o     X Track        X
        o  o  o  o             o     Egress

       o       o               o    o
     o          o             o     o
                                   destination

                       LLN
                       </artwork>
          </figure>
    <!--t>
    A route indicated by an SR-VIO may be loose, meaning that the node that owns
    the next listed Via Address is not necessarily a neighbor. Without proper
    loop avoidance mechanisms, the interaction of loose source routing and other
    mechanisms may effectively cause loops.

    </t-->
    <t>

      When forwarding a packet to a destination for which the router determines
      that routing happens via a Track Target, the router inserts the Source
      Routing Header in the packet with the final destination at the Track Egress.
    </t>
    <t>
      In order to signal the Segment, the router encapsulates the
      packet with an IP-in-IP header and a Routing Header as follows:
    </t>
    <ul>
    <li>
      In the uncompressed form the source of the packet is this router, the
      destination is the first Via Address in the SR-VIO, and the RH is a
      Source Routing Header (SRH) <xref target='RFC6554'/> that contains the
      list of the remaining Via Addresses terminating by the Track Egress.
    </li>
    <li>
    <t>
    The preferred alternate in a network where 6LoWPAN Header Compression
    <xref target='RFC6282'/> is used is to leverage <xref target='RFC8025'>
    "IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Paging
    Dispatch"</xref> to compress the RPL artifacts as indicated in
    <xref target='RFC8138'/>.
    </t>
    <t>
    In that case, the source routed header is the exact copy of the (chain of) SRH-6LoRH found in the SR-VIO, also terminating by the Track Egress.
    The RPI-6LoRH is appended next, followed by an IP-in-IP 6LoRH Header  that indicates the Ingress Router in the Encapsulator Address field, see as a similar case Figure 20 of <xref target='RFC9035'/>.

    </t>
    </li>
    </ul>
    <t>
      In the case of a loose source-routed path, there MUST be either a neighbor
      that is adjacent to the
      loose next hop, on which case the packet is forwarded to that neighbor, or
      another Track to the loose next hop for which this node is Ingress; in the latter case, another encapsulation takes place and the process possibly recurses; otherwise the packet is dropped.
     </t>
      <t>In case of a forwarding error along a Source Route path, the node that
      fails to forward SHOULD send an ICMP error with a code "Error in Source
      Routing Header" back to the source of the packet, as described in section
      11.2.2.3. of <xref target='RFC6550'/>. Upon this message, the
      encapsulating node SHOULD stop using the source route path for a period
      of time and it SHOULD send an ICMP message with a Code "Error in
      Projected Route" to the Root. Failure to follow these steps may result
      in packet loss and wasted resources along the source route path that
      is broken.
      </t>
  </section> <!-- Non-Storing-Mode P-Route -->

      </section><!-- Installing a Track  -->
     <section anchor='routing'><name>Forwarding Along a Track</name>

     <t>
     This draft leverages the RPL Forwarding model follows:
     </t><ul spacing='normal'>
     <li>
      <t>
     In the data packets, the Track DODAGID and the TrackID MUST be respectively signaled as the IPv6 Source Address and the RPLInstanceID field of the RPI that MUST be placed in the outer chain of IPv6 Headers.
      </t>
     <t>
     The RPI carries a local RPLInstanceID called the TrackID, which, in association with the DODAGID, indicates the Track along which the packet is forwarded.
      </t>
     <t>
     The D flag in the RPLInstanceID MUST be set to 0 to indicate that the source address in the IPv6 header is set ot the DODAGID, more
     in <xref target='routing'/>.

     </t>


     </li>
     <li>
      <t>
      This draft conforms the principles of
      <xref target='RFC9008'/> with regards to packet
      forwarding and encapsulation along a Track.
      </t>
      <ul>
      <li>
      In that case,
      the Track is the DODAG, the Track Ingress is the Root, and the Track Egress
      is a RAL, and neighbors of the Track Egress that can be reached via the Track are RULs. The encapsulation rules in  <xref target='RFC9008'/> apply.
      </li><li>
      If the Track Ingress is the originator of the packet and the Track Egress
      is the destination of the packet, there is no need for an encapsulation.
      </li><li>
      So the Track Ingress must encapsulate the traffic that it did not originate, and add an RPI in any fashion.
      </li>
      </ul>
     <t>
     A packet that is being routed over the RPL Instance associated to a first  Non-Storing Mode Track MAY be placed (encapsulated) in a second Track to cover one loose hop of the first Track.
     On the other hand, a Storing Mode Track must be strict and a packet that
     it placed in a Storing Mode Track MUST follow that Track till the Track Egress.
     </t>
     <t>
      When a Track Egress extracts a packet from a Track (decapsulates the packet), the Destination of the inner packet MUST be either this node or a direct neighbor, or a Target of another Segment of the same Track for which this node is ingress, otherwise the packet MUST be dropped.

     </t>
     <!-- TODO: add config parm to the local Instance -->
     </li>
     </ul>
    <t>
     All properties of a Track operations are inherited form the main RPL Instance
     that is used to install the Track. For instance, the use of compression per
     <xref target='RFC8138'/> is determined by whether it is used in the main
     instance, e.g., by setting the "T" flag
     <xref target='RFC9035'/> in the RPL
     configuration option.
   </t>
    </section><!-- Forwarding along a Track -->

    </section><!-- Projected DAO  -->

    <section anchor='prof'><name>Profiles</name>
    <t>
    This document provides a set of tools that may or may not be needed by
    an implementation depending on the type of application it serves.
    This sections described profiles that can be implemented separately and
    can be used to discriminate what an implementation can and cannot do.
    </t>

    <dl>
    <dt> Profile 0 </dt><dd>
      Profile 0 is the legacy support of <xref target='RFC6550'/> Non-Storing
      Mode. It provides the minimal common functionality that must be
      implemented as a prerequisite to all the Track-supporting profiles.
      The other Profiles extend Profile 0 with selected capabilities that this
      specification introduces on top.
    </dd>
    <dt> Profile 1 (Storing-Mode P-Route Segments along the main DODAG) </dt><dd>
      Profile 1 does not
      create new paths; it combines Storing and Non-Storing Modes to balance the
      size of the routing header in the packet and the amount of state in the
      intermediate routers in a Non-Storing Mode RPL DODAG.
    </dd>
    <dt> Profile 2 (Non-Storing-Mode P-Route Segments along the main DODAG)</dt><dd>
      Profile 2 extends Profile 0 with Strict Source-Routing Non-Storing-Mode Projected Routes along the main DODAG. Profile 2 provides the same capability to compress the SRH in packets down the main DODAG as Profile 1, but it require an encapsulation, in order to insert an additional SRH between the loose source routing hops.
    </dd>
    <dt> Profile 3 </dt><dd>
      Profile 3 and above
      build Tracks that do not necessarily follow the main DODAG. In order to
      form the best path possible, those Profiles require the support of
      Sibling Information Option to inform the Root of additional possible hops.
      Profile 3 extends Profile 1 with additional Storing-Mode Projected Routes
      that install segments that do not follow the main DODAG.
      If the Segment Ingress (in the SF-VIO) is the same as the IPv6 Address of
      the Track Ingress (in the projected DAO base Object), the P-DAO creates an
      implicit Track between the Segment Ingress and the Segment Egress.
      </dd>
    <dt> Profile 4 </dt><dd>
      Profile 4 extends Profile 2 with Strict Source-Routing Non-Storing-Mode Projected Routes to form Tracks inside the main DODAG. A Track is formed
      as one or more strict source source routed paths between the Root that
      is the Track Ingress, and the Track Egress that is the last node

    </dd>
    <dt> Profile 5 </dt><dd>
      Profile 5 Combines Profile 4 with Profile 1 and enables to loose source
      routing between the Ingress and the Egress of the Track. As in Profile 1,
      Storing-Mode Projected Routes connect the dots in the loose source route.
    </dd>
    <dt> Profile 6 </dt><dd>
      Profile 6 Combines Profile 4 with Profile 2 and also enables to loose
      source routing between the Ingress and the Egress of the Track.

    </dd>
    </dl>


    </section><!-- Profiles -->

    <section><name>Example Track Signaling</name>
<t>
The remainder of the section provides an example of how a Track can be signaled
</t>

<figure anchor='reft'><name>Reference Track</name>
              <artwork align="center">
                               ===&gt; F
A ===&gt; B ===&gt; C ===&gt; D===&gt; E &lt;
                               ===&gt; G

 </artwork>
</figure>

<t>
A is Track ingress, E is track Egress. C is stitching point. F and G are E’s neighbors, “external” to the Track, and reachable from A over the Track A->E.
</t>

<t>
In a general manner we want:
</t>

<ul>
<li>P-DAO 1 signals C==&gt;B==&gt;E</li>
<li>P-DAO 2 signals A==&gt;B==&gt;C</li>
<li>P-DAO 3 signals F and G via the A==&gt;E Track</li>
</ul>

<t>
P-DAO 3 being loose, it can only be non-storing. Note that since the Root is always the ingress of a Track, and all SR-VIOs are now Track, the Root being signaled in the DAO base object can now be elided in the VIA list in SR-VIO. This enables the construction by the main root of the RFC 8138 optimized SRH-6LoRH in the SR-VIO, to be placed as is in the packet by the Root.
</t>



    <section><name>Using Storing-Mode Segments</name>
<t>
    A==&gt;B==&gt;C and C==&gt;D==&gt;E are segments of a same Track.
    Note that the storing mode signaling imposes strict continuity in a segment.
    One benefit of strict routing is that loops are avoided along the Track.
</t>

    <section><name>Stitched Segments</name>

<t>Storing-Mode P-DAO 1 and 2 are sent to E and C, as follows:</t>

        <table anchor="PDAOcase11"><name>P-DAO Messages</name>
   <thead>

          <tr><th align='center'>Field</th>
              <th align='left'>P-DAO 1 to E</th>
              <th align='left'>P-DAO 2 to C</th></tr>

   </thead>
   <tbody>

          <tr><td align='center'>Mode</td>
              <td align='left'>Storing</td>
              <td align='left'>Storing</td></tr>
          <tr><td align='center'>Track Ingress</td>
              <td align='left'>A</td>
              <td align='left'>A</td></tr>
          <tr><td align='center'>TrackID</td>
              <td align='left'>(A, 129)</td>
              <td align='left'>(A, 129)</td></tr>
          <tr><td align='center'>VIO</td>
              <td align='left'>C, D, E</td>
              <td align='left'>A, B, C</td></tr>
          <tr><td align='center'>Targets</td>
              <td align='left'>E, F, G</td>
              <td align='left'>E, F, G</td></tr>

    </tbody>
        </table>

<t>As a result the RIBs are set as follows:</t>

        <table anchor="RIBcase11"><name>RIB setting</name>
   <thead>

          <tr><th align='center'>Node</th>
              <th align='left'>Destination</th>
              <th align='left'>Origin</th>
              <th align='left'>Next Hop(s)</th>
              <th align='left'>TrackID</th></tr>

   </thead>
   <tbody>

          <tr><td align='center'>E</td>
              <td align='left'>F, G</td>
              <td align='left'>P-DAO 1</td>
              <td align='left'>Neighbor</td>
              <td align='left'>(A, 129)</td></tr>


          <tr><td align='center'>D</td>
              <td align='left'>E</td>
              <td align='left'>P-DAO 1</td>
              <td align='left'>Neighbor</td>
              <td align='left'>(A, 129)</td></tr>

          <tr><td align='center'>"</td>
              <td align='left'>F, G</td>
              <td align='left'>P-DAO 1</td>
              <td align='left'>E</td>
              <td align='left'>(A, 129)</td></tr>

          <tr><td align='center'>C</td>
              <td align='left'>D</td>
              <td align='left'>P-DAO 1</td>
              <td align='left'>Neighbor</td>
              <td align='left'>(A, 129)</td></tr>

          <tr><td align='center'>"</td>
              <td align='left'>E, F, G</td>
              <td align='left'>P-DAO 1</td>
              <td align='left'>D</td>
              <td align='left'>(A, 129)</td></tr>


          <tr><td align='center'>B</td>
              <td align='left'>C</td>
              <td align='left'>P-DAO 2</td>
              <td align='left'>Neighbor</td>
              <td align='left'>(A, 129)</td></tr>

          <tr><td align='center'>"</td>
              <td align='left'>E, F, G</td>
              <td align='left'>P-DAO 2</td>
              <td align='left'>C</td>
              <td align='left'>(A, 129)</td></tr>

          <tr><td align='center'>A</td>
              <td align='left'>B</td>
              <td align='left'>P-DAO 2</td>
              <td align='left'>Neighbor</td>
              <td align='left'>(A, 129)</td></tr>

          <tr><td align='center'>A</td>
              <td align='left'>E, F, G</td>
              <td align='left'>P-DAO 2</td>
              <td align='left'>B</td>
              <td align='left'>(A, 129)</td></tr>


    </tbody>
        </table>




<t>
    E recognizes that it is the Track Egress because it is both a Target and a
    Segment Endpoint.
</t>
<t>
    Packets originated by A to E, F, or G, do not require an encapsulation.
    In any fashion,
    the outer headers of the packets that are forwarded along the Track have
    the following settings:
</t>


   <table anchor="Packetcase11"><name>Packet header settings</name>  <thead>

          <tr><th align='center'>Header</th>
          <th align='center'>IPv6 Source Addr.</th>
              <th align='center'>IPv6 Dest. Addr.</th>
              <th align='center'>TrackID in RPI</th></tr>

   </thead>
   <tbody>
          <tr><td align='center'>Outer</td>
              <td align='center'>A</td>
              <td align='center'>E, F or G</td>
              <td align='center'>(A, 129)</td></tr>
          <tr><td align='center'>Inner</td>
              <td align='center'>X != A</td>
              <td align='center'>E, F or G</td>
              <td align='center'>N/A</td></tr>
    </tbody>
        </table>
<t>
As an example, say that A has a packet for F. Using the RIB above:
</t>
<ul>
<li>From P-DAO 2: A forwards to B and B forwards to C.</li>
<li>From P-DAO 1: C forwards to D and D forwards to E.</li>
<li>From Neighbor Cache Entry: C delivers the packet to F.</li>
</ul>

    </section><!-- Stitched Segments -->

    <section><name>External routes</name>

<t>Storing-Mode P-DAO 1 and 2, and Non-Storing-Mode P-DAO 3, are sent to E, C
 and A, respectively, as follows:</t>

        <table anchor="PDAOcase12"><name>P-DAO Messages</name>
   <thead>

          <tr><th align='center'> </th>
              <th align='left'>P-DAO 1 to E</th>
              <th align='left'>P-DAO 2 to C</th>
              <th align='left'>P-DAO 3 to A</th></tr>

   </thead>
   <tbody>

          <tr><td align='center'>Mode</td>
              <td align='left'>Storing</td>
              <td align='left'>Storing</td>
              <td align='left'>Non-Storing</td></tr>
          <tr><td align='center'>Track Ingress</td>
              <td align='left'>A</td>
              <td align='left'>A</td>
              <td align='left'>A</td></tr>
          <tr><td align='center'>TrackID</td>
              <td align='left'>(A, 129)</td>
              <td align='left'>(A, 129)</td>
              <td align='left'>(A, 129)</td></tr>
          <tr><td align='center'>VIO</td>
              <td align='left'>C, D, E</td>
              <td align='left'>A, B, C</td>
              <td align='left'>E</td></tr>
          <tr><td align='center'>Targets</td>
              <td align='left'>E</td>
              <td align='left'>E</td>
              <td align='left'>F, G</td></tr>

    </tbody>
        </table>

<t>As a result the RIBs are set as follows:</t>

        <table anchor="RIBcase12"><name>RIB setting</name>
   <thead>

          <tr><th align='center'>Node</th>
              <th align='left'>Destination</th>
              <th align='left'>Origin</th>
              <th align='left'>Next Hop(s)</th>
              <th align='left'>TrackID</th></tr>

   </thead>
      <tbody>

          <tr><td align='center'>E</td>
              <td align='left'>F, G</td>
              <td align='left'>P-DAO 1</td>
              <td align='left'>Neighbor</td>
              <td align='left'>(A, 129)</td></tr>


          <tr><td align='center'>D</td>
              <td align='left'>E</td>
              <td align='left'>P-DAO 1</td>
              <td align='left'>Neighbor</td>
              <td align='left'>(A, 129)</td></tr>


          <tr><td align='center'>C</td>
              <td align='left'>D</td>
              <td align='left'>P-DAO 1</td>
              <td align='left'>Neighbor</td>
              <td align='left'>(A, 129)</td></tr>

          <tr><td align='center'>"</td>
              <td align='left'>E</td>
              <td align='left'>P-DAO 1</td>
              <td align='left'>D</td>
              <td align='left'>(A, 129)</td></tr>

          <tr><td align='center'>B</td>
              <td align='left'>C</td>
              <td align='left'>P-DAO 2</td>
              <td align='left'>Neighbor</td>
              <td align='left'>(A, 129)</td></tr>

          <tr><td align='center'>"</td>
              <td align='left'>E</td>
              <td align='left'>P-DAO 2</td>
              <td align='left'>C</td>
              <td align='left'>(A, 129)</td></tr>

          <tr><td align='center'>A</td>
              <td align='left'>B</td>
              <td align='left'>P-DAO 2</td>
              <td align='left'>Neighbor</td>
              <td align='left'>(A, 129)</td></tr>

          <tr><td align='center'>A</td>
              <td align='left'>E</td>
              <td align='left'>P-DAO 2</td>
              <td align='left'>B</td>
              <td align='left'>(A, 129)</td></tr>

          <tr><td align='center'>A</td>
              <td align='left'>F, G</td>
              <td align='left'>P-DAO 3</td>
              <td align='left'>E</td>
              <td align='left'>(A, 129)</td></tr>


    </tbody>
        </table>

        <!--
<t>As a result the RIBs are set as follows:</t>

        <table anchor="RIBcase12o"><name>RIB setting</name>
   <thead>

          <tr><th align='center'>Node</th>
              <th align='left'>Control Message</th>
              <th align='left'>Next Hop(s)</th>
              <th align='left'>Destination</th></tr>

   </thead>
   <tbody>

          <tr><td align='center'>E</td>
              <td align='left'>NS(EARO)</td>
              <td align='left'>F</td>
              <td align='left'>F</td></tr>
          <tr><td align='center'> </td>
              <td align='left'>NS(EARO)</td>
              <td align='left'>G</td>
              <td align='left'>G</td></tr>

          <tr><td align='center'>D</td>
              <td align='left'>NS(EARO)</td>
              <td align='left'>E</td>
              <td align='left'>E</td></tr>

          <tr><td align='center'>C</td>
              <td align='left'>NS(EARO)</td>
              <td align='left'>D</td>
              <td align='left'>D</td></tr>
          <tr><td align='center'> </td>
              <td align='left'>P-DAO 1</td>
              <td align='left'>D</td>
              <td align='left'>E</td></tr>

          <tr><td align='center'>B</td>
              <td align='left'>NS(EARO)</td>
              <td align='left'>C</td>
              <td align='left'>C</td></tr>
          <tr><td align='center'> </td>
              <td align='left'>P-DAO 2</td>
              <td align='left'>C</td>
              <td align='left'>E</td></tr>

          <tr><td align='center'>A</td>
              <td align='left'>NS(EARO)</td>
              <td align='left'>B</td>
              <td align='left'>B</td></tr>
          <tr><td align='center'> </td>
              <td align='left'>P-DAO 2</td>
              <td align='left'>B</td>
              <td align='left'>E</td></tr>

          <tr><td align='center'> </td>
              <td align='left'>P-DAO 3</td>
              <td align='left'>E</td>
              <td align='left'>E</td></tr>
          <tr><td align='center'> </td>
              <td align='left'>P-DAO 3</td>
              <td align='left'>E</td>
              <td align='left'>F</td></tr>
          <tr><td align='center'> </td>
              <td align='left'>P-DAO 3</td>
              <td align='left'>E</td>
              <td align='left'>G</td></tr>


    </tbody>
        </table>
        -->

<t>
    Packets from A to E do not require an encapsulation. In any fashion,
    the outer headers of the packets that are forwarded along the Track have
    the following settings:
</t>


        <table anchor="Packetcase12"><name>Packet header settings</name>
   <thead>

          <tr><th align='center'>Header</th>
          <th align='center'>IPv6 Source Addr.</th>
              <th align='center'>IPv6 Dest. Addr.</th>
              <th align='center'>TrackID in RPI</th></tr>

   </thead>
   <tbody>
          <tr><td align='center'>Outer</td>
              <td align='center'>A</td>
              <td align='center'>E</td>
              <td align='center'>(A, 129)</td></tr>
          <tr><td align='center'>Inner</td>
              <td align='center'>X</td>
              <td align='center'>E (X != A), F or G</td>
              <td align='center'>N/A</td></tr>
    </tbody>
        </table>
<t>
As an example, say that A has a packet for F. Using the RIB above:
</t>
<ul>
<li>From P-DAO 3: A encapsulates the packet the Track signaled by P-DAO 3, with the outer header above.
Now the packet destination is E.</li>
<li>From P-DAO 2: A forwards to B and B forwards to C.</li>
<li>From P-DAO 1: C forwards to D and D forwards to E; E decapsulates the packet.</li>
<li>From Neighbor Cache Entry: C delivers packets to F or G.</li>
</ul>
    </section><!-- External routes -->

    <section><name>Segment Routing</name>

<t>Storing-Mode P-DAO 1 and 2, and Non-Storing-Mode P-DAO 3, are sent to E, B
 and A, respectively, as follows:</t>

        <table anchor="PDAOcase13"><name>P-DAO Messages</name>
   <thead>

          <tr><th align='center'> </th>
              <th align='left'>P-DAO 1 to E</th>
              <th align='left'>P-DAO 2 to B</th>
              <th align='left'>P-DAO 3 to A</th></tr>

   </thead>
   <tbody>

          <tr><td align='center'>Mode</td>
              <td align='left'>Storing</td>
              <td align='left'>Storing</td>
              <td align='left'>Non-Storing</td></tr>
          <tr><td align='center'>Track Ingress</td>
              <td align='left'>A</td>
              <td align='left'>A</td>
              <td align='left'>A</td></tr>
          <tr><td align='center'>TrackID</td>
              <td align='left'>(A, 129)</td>
              <td align='left'>(A, 129)</td>
              <td align='left'>(A, 129)</td></tr>
          <tr><td align='center'>VIO</td>
              <td align='left'>C, D, E</td>
              <td align='left'>A, B</td>
              <td align='left'>C, E</td></tr>
          <tr><td align='center'>Targets</td>
              <td align='left'>E</td>
              <td align='left'>B, C</td>
              <td align='left'>F, G</td></tr>

    </tbody>
        </table>
<t>As a result the RIBs are set as follows:</t>

        <table anchor="RIBcase13"><name>RIB setting</name>
           <thead>

          <tr><th align='center'>Node</th>
              <th align='left'>Destination</th>
              <th align='left'>Origin</th>
              <th align='left'>Next Hop(s)</th>
              <th align='left'>TrackID</th></tr>

   </thead>
      <tbody>

          <tr><td align='center'>E</td>
              <td align='left'>F, G</td>
              <td align='left'>P-DAO 1</td>
              <td align='left'>Neighbor</td>
              <td align='left'>(A, 129)</td></tr>


          <tr><td align='center'>D</td>
              <td align='left'>E</td>
              <td align='left'>P-DAO 1</td>
              <td align='left'>Neighbor</td>
              <td align='left'>(A, 129)</td></tr>


          <tr><td align='center'>C</td>
              <td align='left'>D</td>
              <td align='left'>P-DAO 1</td>
              <td align='left'>Neighbor</td>
              <td align='left'>(A, 129)</td></tr>

          <tr><td align='center'>"</td>
              <td align='left'>E</td>
              <td align='left'>P-DAO 1</td>
              <td align='left'>D</td>
              <td align='left'>(A, 129)</td></tr>

          <tr><td align='center'>B</td>
              <td align='left'>C</td>
              <td align='left'>P-DAO 2</td>
              <td align='left'>Neighbor</td>
              <td align='left'>(A, 129)</td></tr>


          <tr><td align='center'>A</td>
              <td align='left'>B</td>
              <td align='left'>P-DAO 2</td>
              <td align='left'>Neighbor</td>
              <td align='left'>(A, 129)</td></tr>

          <tr><td align='center'>"</td>
              <td align='left'>C</td>
              <td align='left'>P-DAO 2</td>
              <td align='left'>B</td>
              <td align='left'>(A, 129)</td></tr>

          <tr><td align='center'>"</td>
              <td align='left'>E, F, G</td>
              <td align='left'>P-DAO 3</td>
              <td align='left'>C, E</td>
              <td align='left'>(A, 129)</td></tr>



    </tbody>
        </table>



<t>
    Packets from A to E do not require an encapsulation, but carry a SRH via C.
    In any fashion,
    the outer headers of the packets that are forwarded along the Track have
    the following settings:
</t>
        <table anchor="Packetcase13"><name>Packet header settings</name>
   <thead>

          <tr><th align='center'>Header</th>
          <th align='center'>IPv6 Source Addr.</th>
              <th align='center'>IPv6 Dest. Addr.</th>
              <th align='center'>TrackID in RPI</th></tr>

   </thead>
   <tbody>
          <tr><td align='center'>Outer</td>
              <td align='center'>A</td>
              <td align='center'>C till C then E</td>
              <td align='center'>(A, 129)</td></tr>
          <tr><td align='center'>Inner</td>
              <td align='center'>X</td>
              <td align='center'>E (X != A), F or G</td>
              <td align='center'>N/A</td></tr>
    </tbody>
        </table>
<t>
As an example, say that A has a packet for F. Using the RIB above:
</t>
<ul>
<li>From P-DAO 3: A encapsulates the packet the Track signaled by P-DAO 3, with the outer header above.
Now the destination in the IPv6 Header is C, and a SRH signals the final destination is E.</li>
<li>From P-DAO 2: A forwards to B and B forwards to C.</li>
<li>From P-DAO 3: C processes the SRH and sets the destination in the IPv6 Header to E.</li>
<li>From P-DAO 1: C forwards to D and D forwards to E; E decapsulates the packet.</li>
<li>From the Neighbor Cache Entry: C delivers packets to F or G.</li>
</ul>

    </section><!-- Segment Routing -->



    </section><!-- Using Storing-Mode Segments -->




    <section><name>Using Non-Storing-Mode joining Tracks</name>

<t>
    A==&gt;B==&gt;C and C==&gt;D==&gt;E are Tracks expressed as non-storing P-DAOs.

</t>

    <section><name>Stitched Tracks</name>

    <t>
    Non-Storing Mode P-DAO 1 and 2 are sent to C and A respectively, as follows:
    </t>

        <table anchor="PDAOcase21"><name>P-DAO Messages</name>
   <thead>

          <tr><th align='center'> </th>
              <th align='left'>P-DAO 1 to C</th>
              <th align='left'>P-DAO 2 to A</th></tr>

   </thead>
   <tbody>

          <tr><td align='center'>Mode</td>
              <td align='left'>Non-Storing</td>
              <td align='left'>Non-Storing</td></tr>
          <tr><td align='center'>Track Ingress</td>
              <td align='left'>C</td>
              <td align='left'>A</td></tr>
          <tr><td align='center'>TrackID</td>
              <td align='left'>(C, 131)</td>
              <td align='left'>(A, 129)</td></tr>
          <tr><td align='center'>VIO</td>
              <td align='left'>D, E</td>
              <td align='left'>B, C</td></tr>
          <tr><td align='center'>Targets</td>
              <td align='left'>F, G</td>
              <td align='left'>E, F, G</td></tr>

    </tbody>
        </table>


<t>As a result the RIBs are set as follows:</t>

        <table anchor="RIBcase21"><name>RIB setting</name>
           <thead>

          <tr><th align='center'>Node</th>
              <th align='left'>Destination</th>
              <th align='left'>Origin</th>
              <th align='left'>Next Hop(s)</th>
              <th align='left'>TrackID</th></tr>

   </thead>
      <tbody>

          <tr><td align='center'>E</td>
              <td align='left'>F, G</td>
              <td align='left'>ND</td>
              <td align='left'>Neighbor</td>
              <td align='left'>Any</td></tr>


          <tr><td align='center'>D</td>
              <td align='left'>E</td>
              <td align='left'>ND</td>
              <td align='left'>Neighbor</td>
              <td align='left'>Any</td></tr>


          <tr><td align='center'>C</td>
              <td align='left'>D</td>
              <td align='left'>ND</td>
              <td align='left'>Neighbor</td>
              <td align='left'>Any</td></tr>

          <tr><td align='center'>"</td>
              <td align='left'>E, F, G</td>
              <td align='left'>P-DAO 1</td>
              <td align='left'>D, E</td>
              <td align='left'>(C, 131)</td></tr>

          <tr><td align='center'>B</td>
              <td align='left'>C</td>
              <td align='left'>ND</td>
              <td align='left'>Neighbor</td>
              <td align='left'>Any</td></tr>


          <tr><td align='center'>A</td>
              <td align='left'>B</td>
              <td align='left'>ND</td>
              <td align='left'>Neighbor</td>
              <td align='left'>Any</td></tr>

          <tr><td align='center'>"</td>
              <td align='left'>C, E, F, G</td>
              <td align='left'>P-DAO 2</td>
              <td align='left'>B, C</td>
              <td align='left'>(A, 129)</td></tr>


    </tbody>
        </table>



<t>
    Packets from A to E, F and G do not require an encapsulation, though it is
    preferred that A encapsulates and C decapsulates. Either way, they
    carry a SRH via B and C, and C needs to encapsulate to E, F, or G
    to add an SRH via D and E.
    The encapsulating headers of packets that are forwarded along the Track
    between C and E have the following settings:
</t>


        <table anchor="Packetcase21"><name>Packet header settings</name>
   <thead>

          <tr><th align='center'>Header</th>
          <th align='center'>IPv6 Source Addr.</th>
              <th align='center'>IPv6 Dest. Addr.</th>
              <th align='center'>TrackID in RPI</th></tr>

   </thead>
   <tbody>
          <tr><td align='center'>Outer</td>
              <td align='center'>C</td>
              <td align='center'>D till D then E</td>
              <td align='center'>(C, 131)</td></tr>
          <tr><td align='center'>Inner</td>
              <td align='center'>X</td>
              <td align='center'>E, F, or G</td>
              <td align='center'>N/A</td></tr>
    </tbody>
        </table>


<t>As an example, say that A has a packet for F.  Using the RIB above:</t>
<ul>
<li>From P-DAO 2:
A encapsulates the packet with destination of F in the Track signaled by P-DAO 2. The outer header has source A, destination B, an SRH that indicates C as the next loose hop, and a RPI indicating a TrackId of 129 from A's namespace.
</li>
<li>From the SRH:
Packets forwarded by B have source A, destination C , a consumed SRH, and a RPI indicating a TrackId of 129 from A's namespace. C decapsulates.
</li>
<li>
From P-DAO 1:
C encapsulates the packet with destination of F in the Track signaled by P-DAO 1. The outer header has source C, destination D, an SRH that indicates E as the next loose hop, and a RPI indicating a TrackId of 131 from C's namespace. E decapsulates.
</li>
</ul>

    </section><!-- Stitched Tracks -->

    <section><name>External routes</name>

    <t>
    Non-Storing Mode P-DAO 1 is sent to C and Non-Storing Mode P-DAO 2 and 3 are sent A, as follows:
    </t>

        <table anchor="PDAOcase22"><name>P-DAO Messages</name>
   <thead>

          <tr><th align='center'> </th>
              <th align='left'>P-DAO 1 to C</th>
              <th align='left'>P-DAO 2 to A</th>
              <th align='left'>P-DAO 3 to A</th></tr>

   </thead>
   <tbody>

          <tr><td align='center'>Mode</td>
              <td align='left'>Non-Storing</td>
              <td align='left'>Non-Storing</td>
              <td align='left'>Non-Storing</td></tr>
          <tr><td align='center'>Track Ingress</td>
              <td align='left'>C</td>
              <td align='left'>A</td>
              <td align='left'>A</td></tr>
          <tr><td align='center'>TrackID</td>
              <td align='left'>(C, 131)</td>
              <td align='left'>(A, 129)</td>
              <td align='left'>(A, 141)</td></tr>
          <tr><td align='center'>VIO</td>
              <td align='left'>D, E</td>
              <td align='left'>B, C</td>
              <td align='left'>E</td></tr>
          <tr><td align='center'>Targets</td>
              <td align='left'>E</td>
              <td align='left'>E</td>
              <td align='left'>F, G</td></tr>

    </tbody>
        </table>

<t>As a result the RIBs are set as follows:</t>

        <table anchor="RIBcase22"><name>RIB setting</name>
                   <thead>

          <tr><th align='center'>Node</th>
              <th align='left'>Destination</th>
              <th align='left'>Origin</th>
              <th align='left'>Next Hop(s)</th>
              <th align='left'>TrackID</th></tr>

   </thead>
      <tbody>

          <tr><td align='center'>E</td>
              <td align='left'>F, G</td>
              <td align='left'>ND</td>
              <td align='left'>Neighbor</td>
              <td align='left'>Any</td></tr>


          <tr><td align='center'>D</td>
              <td align='left'>E</td>
              <td align='left'>ND</td>
              <td align='left'>Neighbor</td>
              <td align='left'>Any</td></tr>


          <tr><td align='center'>C</td>
              <td align='left'>D</td>
              <td align='left'>ND</td>
              <td align='left'>Neighbor</td>
              <td align='left'>Any</td></tr>

          <tr><td align='center'>"</td>
              <td align='left'>E</td>
              <td align='left'>P-DAO 1</td>
              <td align='left'>D, E</td>
              <td align='left'>(C, 131)</td></tr>

          <tr><td align='center'>B</td>
              <td align='left'>C</td>
              <td align='left'>ND</td>
              <td align='left'>Neighbor</td>
              <td align='left'>Any</td></tr>


          <tr><td align='center'>A</td>
              <td align='left'>B</td>
              <td align='left'>ND</td>
              <td align='left'>Neighbor</td>
              <td align='left'>Any</td></tr>

          <tr><td align='center'>"</td>
              <td align='left'>C, E</td>
              <td align='left'>P-DAO 2</td>
              <td align='left'>B, C</td>
              <td align='left'>(A, 129)</td></tr>


          <tr><td align='center'>"</td>
              <td align='left'>F, G</td>
              <td align='left'>P-DAO 3</td>
              <td align='left'>E</td>
              <td align='left'>(A, 141)</td></tr>


    </tbody>
        </table>

<t>
    The encapsulating headers of packets that are forwarded along the Track
    between C and E have the following settings:
</t>


        <table anchor="Packetcase22"><name>Packet header settings</name>
   <thead>

          <tr><th align='center'>Header</th>
          <th align='center'>IPv6 Source Addr.</th>
              <th align='center'>IPv6 Dest. Addr.</th>
              <th align='center'>TrackID in RPI</th></tr>

   </thead>
   <tbody>
          <tr><td align='center'>Outer</td>
              <td align='center'>C</td>
              <td align='center'>D till D then E</td>
              <td align='center'>(C, 131)</td></tr>
          <tr><td align='center'>Middle</td>
              <td align='center'>A</td>
              <td align='center'>E</td>
              <td align='center'>(A, 141)</td></tr>
          <tr><td align='center'>Inner</td>
              <td align='center'>X</td>
              <td align='center'>E, F or G</td>
              <td align='center'>N/A</td></tr>
    </tbody>
        </table>

    <!--
          1.  non storing mode P-DAO 1 is sent to C. It has Root = C, SRVIO = D, E, Track ID 131 from C's namespace, Target = E
      2.  non storing mode P-DAO 2 is then sent to A. It has Root = A, SRVIO = B, C, Track ID 129 from A's namespace, Target = E
      3.  non storing mode P-DAO 3 is then sent to A. It has Root = A, SRVIO = E, Track ID 141 from A's namespace, Target = F, G



    >From P-DAO 3: A encapsulates packets with dest =   F | G. The outer header has source = A, destination = E, and RPI = 141.
    This may recurse with:
    >From P-DAO 2: A encapsulates packets with dest =  E. The outer header has source = A, destination = B, SRH = C and RPI = 129.
    Packets forwarded by B have source= A, destination = C , SRH =, and RPI = 129. C decapsulates.
    >From P-DAO 1: C  encapsulates packets with dest =  E. The outer header has source= C, destination = D, SRH = E and RPI = 131.
    E decapsulates if encapsulated.
    -->


<t>As an example, say that A has a packet for F.  Using the RIB above:</t>
<ul>
<li>
From P-DAO 3: A encapsulates the packet with destination of F in the Track signaled by P-DAO 3. The outer header has source A, destination E, and a RPI indicating a TrackId of 141 from A's namespace. This recurses with:
</li>
<li>
From P-DAO 2: A encapsulates the packet with destination of E in the Track signaled by P-DAO 2. The outer header has source A, destination B, an SRH that indicates C as the next loose hop, and a RPI indicating a TrackId of 129 from A's namespace.
</li>
<li>
From the SRH:
Packets forwarded by B have source A, destination C , a consumed SRH, and a RPI indicating a TrackId of 129 from A's namespace. C decapsulates.
</li>
<li>
From P-DAO 1:
C encapsulates the packet with destination of E in the Track signaled by P-DAO 1. The outer header has source C, destination D, an SRH that indicates E as the next loose hop, and a RPI indicating a TrackId of 131 from C's namespace. E decapsulates.
</li>
</ul>

    </section><!-- External routes -->

    <section><name>Segment Routing</name>



    <t>
    Non-Storing Mode P-DAO 1 is sent to C and Non-Storing Mode P-DAO 2 and 3 are sent A, as follows:
    </t>

        <table anchor="PDAOcase23"><name>P-DAO Messages</name>
   <thead>

          <tr><th align='center'> </th>
              <th align='left'>P-DAO 1 to C</th>
              <th align='left'>P-DAO 2 to A</th>
              <th align='left'>P-DAO 3 to A</th></tr>

   </thead>
   <tbody>

          <tr><td align='center'>Mode</td>
              <td align='left'>Non-Storing</td>
              <td align='left'>Non-Storing</td>
              <td align='left'>Non-Storing</td></tr>
          <tr><td align='center'>Track Ingress</td>
              <td align='left'>C</td>
              <td align='left'>A</td>
              <td align='left'>A</td></tr>
          <tr><td align='center'>TrackID</td>
              <td align='left'>(C, 131)</td>
              <td align='left'>(A, 129)</td>
              <td align='left'>(A, 141)</td></tr>
          <tr><td align='center'>VIO</td>
              <td align='left'>D, E</td>
              <td align='left'>B</td>
              <td align='left'>C, E</td></tr>
          <tr><td align='center'>Targets</td>
              <td align='left'></td>
              <td align='left'>C</td>
              <td align='left'>F, G</td></tr>

    </tbody>
        </table>



<t>As a result the RIBs are set as follows:</t>

        <table anchor="RIBcase23"><name>RIB setting</name>
                   <thead>

          <tr><th align='center'>Node</th>
              <th align='left'>Destination</th>
              <th align='left'>Origin</th>
              <th align='left'>Next Hop(s)</th>
              <th align='left'>TrackID</th></tr>

   </thead>
      <tbody>

          <tr><td align='center'>E</td>
              <td align='left'>F, G</td>
              <td align='left'>ND</td>
              <td align='left'>Neighbor</td>
              <td align='left'>Any</td></tr>


          <tr><td align='center'>D</td>
              <td align='left'>E</td>
              <td align='left'>ND</td>
              <td align='left'>Neighbor</td>
              <td align='left'>Any</td></tr>


          <tr><td align='center'>C</td>
              <td align='left'>D</td>
              <td align='left'>ND</td>
              <td align='left'>Neighbor</td>
              <td align='left'>Any</td></tr>

          <tr><td align='center'>"</td>
              <td align='left'>E</td>
              <td align='left'>P-DAO 1</td>
              <td align='left'>D, E</td>
              <td align='left'>(C, 131)</td></tr>

          <tr><td align='center'>B</td>
              <td align='left'>C</td>
              <td align='left'>ND</td>
              <td align='left'>Neighbor</td>
              <td align='left'>Any</td></tr>


          <tr><td align='center'>A</td>
              <td align='left'>B</td>
              <td align='left'>ND</td>
              <td align='left'>Neighbor</td>
              <td align='left'>Any</td></tr>

          <tr><td align='center'>"</td>
              <td align='left'>C</td>
              <td align='left'>P-DAO 2</td>
              <td align='left'>B, C</td>
              <td align='left'>(A, 129)</td></tr>


          <tr><td align='center'>"</td>
              <td align='left'>E, F, G</td>
              <td align='left'>P-DAO 3</td>
              <td align='left'>C, E</td>
              <td align='left'>(A, 141)</td></tr>


    </tbody>
        </table>

<t>
    The encapsulating headers of packets that are forwarded along the Track
    between A and B have the following settings:
</t>


        <table anchor="Packetcase231"><name>Packet header settings</name>
   <thead>

          <tr><th align='center'>Header</th>
          <th align='center'>IPv6 Source Addr.</th>
              <th align='center'>IPv6 Dest. Addr.</th>
              <th align='center'>TrackID in RPI</th></tr>

   </thead>
   <tbody>
          <tr><td align='center'>Outer</td>
              <td align='center'>A</td>
              <td align='center'>B till D then E</td>
              <td align='center'>(A, 129)</td></tr>
          <tr><td align='center'>Middle</td>
              <td align='center'>A</td>
              <td align='center'>C</td>
              <td align='center'>(A, 141)</td></tr>
          <tr><td align='center'>Inner</td>
              <td align='center'>X</td>
              <td align='center'>E, F or G</td>
              <td align='center'>N/A</td></tr>
    </tbody>
        </table>

 <t>
    The encapsulating headers of packets that are forwarded along the Track
    between B and C have the following settings:
</t>


        <table anchor="Packetcase232"><name>Packet header settings</name>
   <thead>

          <tr><th align='center'>Header</th>
          <th align='center'>IPv6 Source Addr.</th>
              <th align='center'>IPv6 Dest. Addr.</th>
              <th align='center'>TrackID in RPI</th></tr>

   </thead>
   <tbody>
          <tr><td align='center'>Outer</td>
              <td align='center'>A</td>
              <td align='center'>C</td>
              <td align='center'>(A, 141)</td></tr>
          <tr><td align='center'>Inner</td>
              <td align='center'>X</td>
              <td align='center'>E, F or G</td>
              <td align='center'>N/A</td></tr>
    </tbody>
        </table>

<t>
    The encapsulating headers of packets that are forwarded along the Track
    between C and E have the following settings:
</t>


        <table anchor="Packetcase233"><name>Packet header settings</name>
   <thead>

          <tr><th align='center'>Header</th>
          <th align='center'>IPv6 Source Addr.</th>
              <th align='center'>IPv6 Dest. Addr.</th>
              <th align='center'>TrackID in RPI</th></tr>

   </thead>
   <tbody>
          <tr><td align='center'>Outer</td>
              <td align='center'>C</td>
              <td align='center'>D till D then E</td>
              <td align='center'>(C, 131)</td></tr>
          <tr><td align='center'>Middle</td>
              <td align='center'>A</td>
              <td align='center'>E</td>
              <td align='center'>(A, 141)</td></tr>
          <tr><td align='center'>Inner</td>
              <td align='center'>X</td>
              <td align='center'>E, F or G</td>
              <td align='center'>N/A</td></tr>
    </tbody>
        </table>

    <!--

      1.  non storing mode P-DAO 1 is sent to C. It has Root = C, SRVIO = D, E, Track ID 131 from C's namespace, (Target = E is implicit)
      2.  non storing mode P-DAO 2 is then sent to A. It has Root = A, SRVIO = B,  Track ID 129 from A's namespace, Target = C
      3.  non storing mode P-DAO 3 is then sent to A. It has Root = A, SRVIO = C, E, Track ID 141 from A's namespace, Target = F, G

  -->

<t>As an example, say that A has a packet for F.  Using the RIB above:</t>
<ul>
<li>From P-DAO 3: A encapsulates the packet with destination of F in the Track signaled by P-DAO 3. The outer header has source A, destination C, an SRH that indicates E as the next loose hop, and a RPI indicating a TrackId of 141 from A's namespace. This recurses with:
</li>
<li>
From P-DAO 2: A encapsulates the packet with destination of C in the Track signaled by P-DAO 2. The outer header has source A, destination B, and a RPI indicating a TrackId of 129 from A's namespace. B decapsulates forwards to C based on a sibling connected route.
</li>
<li>
From the SRH: C consumes the SRH and makes the destination E.
</li>
<li>
From P-DAO 1:
C encapsulates the packet with destination of E in the Track signaled by P-DAO 1. The outer header has source C, destination D, an SRH that indicates E as the next loose hop, and a RPI indicating a TrackId of 131 from C's namespace. E decapsulates.
</li>
</ul>

    </section><!-- Segment Routing -->


  </section><!-- Using Non-Storing-Mode joining Tracks -->


</section><!-- Example Track Signaling -->



    <section><name>Security Considerations</name>


     <t>
   It is worth noting that with <xref target='RFC6550'/>, every
   node in the LLN is RPL-aware and can inject any RPL-based attack in the
   network. This draft uses messages that are already present in RPL
   <xref target='RFC6550'/> with optional secured versions. The same secured
   versions may be used with this draft, and whatever security is deployed for
     a given network also applies to the flows in this draft.

 </t>
 <t>
	The LLN nodes depend on the 6LBR and the RPL participants for their
    operation.
	A trust model must be put in place to ensure that the right devices are
	acting in these roles, so as to avoid threats such as black-holing,
    (see <xref target='RFC7416'/> section 7). This trust model could be
    at a minimum based on a Layer-2 Secure joining and the Link-Layer security.
    This is a generic 6LoWPAN requirement, see Req5.1 in Appendix B.5 of <xref target='RFC8505'/>.
 </t><t>
    In a general manner, the Security Considerations in <xref target='RFC6550'/>,
    and <xref target='RFC7416'/> apply to this specification as well.
    The Link-Layer security is needed in particular to prevent
    Denial-Of-Service attacks whereby a rogue router creates a high churn in the
    RPL network by constantly injected forged P-DAO messages and using up all
    the available storage in the attacked routers.

 </t> <t>
    Additionally, the trust model could include a role validation (e.g., using a
    role-based authorization) to ensure that the node that
    claims to be a RPL Root is entitled to do so. That trust should propagate
    from egress to ingress in the case of a Storing Mode P-DAO.

	</t>


</section>
<section anchor='IANAcon'><name>IANA Considerations</name>


   <section anchor='elec6lorh'><name>New Elective 6LoWPAN Routing Header Type</name>

   <t>  This document updates the IANA registry titled "Elective 6LoWPAN
   Routing Header Type" that was created for <xref target='RFC8138'/>  and assigns the following value:
</t>
        <table anchor="elec6lorhtbl"><name>New Elective 6LoWPAN Routing Header Type</name>
   <thead>

          <tr><th align='center'>Value</th>

          <th align='left'>Description</th>

          <th align='left'>Reference</th></tr>

   </thead><tbody>

          <tr><td align='center'>7</td>

          <td align='left'>P-RPI-6LoRH</td>

          <td align='left'>This document</td></tr>

    </tbody>
        </table>
   </section><!-- New Elective 6LoWPAN Routing Header Type -->


   <section anchor='crit6lorh'><name>New Critical 6LoWPAN Routing Header Type</name>
   <t>  This document updates the IANA registry titled "Critical 6LoWPAN
   Routing Header Type" that was created for <xref target='RFC8138'/>  and assigns the following value:
</t>
        <table anchor="crit6lorhtbl"><name>New Critical 6LoWPAN Routing Header Type</name>
   <thead>

          <tr><th align='center'>Value</th>

          <th align='left'>Description</th>

          <th align='left'>Reference</th></tr>

   </thead><tbody>

          <tr><td align='center'>7</td>

          <td align='left'>P-RPI-6LoRH</td>

          <td align='left'>This document</td></tr>

    </tbody>
        </table>
   </section><!-- New Critical 6LoWPAN Routing Header Type -->




   <section anchor='RPIIANA'><name>New Subregistry For The RPL Option Flags</name>
    <t>
   IANA is required to create a subregistry for the 8-bit RPL Option Flags field, as detailed in <xref target='Rpifmt'/>, under the "Routing Protocol for Low Power and Lossy Networks (RPL)" registry. The bits are indexed from 0 (leftmost) to 7. Each bit is tracked with the following qualities:
   </t>
   <ul>
     <li>Bit number (counting from bit 0 as the most significant bit)</li>
     <li>Indication When Set</li>
     <li>Reference</li>
   </ul>

 <t> Registration procedure is "Standards Action" <xref target='RFC8126'/>. The initial allocation is as indicated in <xref target='RPLPDRflagRegtbl'/>:
 </t>

        <table anchor="RPLoptFlagtbl"><name>Initial PDR Flags</name>
   <thead>

          <tr><th align='center'>Bit number</th>

          <th align='left'>Indication When Set</th>

          <th align='left'>Reference</th></tr>

   </thead><tbody>

          <tr><td align='center'>0</td>

          <td align='left'>Down 'O'</td>

          <td align='left'><xref target='RFC6553'/> </td></tr>

          <tr><td align='center'>1</td>

          <td align='left'>Rank-Error (R)</td>

          <td align='left'><xref target='RFC6553'/> </td></tr>

          <tr><td align='center'>2</td>

          <td align='left'>Forwarding-Error (F)</td>

          <td align='left'><xref target='RFC6553'/> </td></tr>

          <tr><td align='center'>3</td>

          <td align='left'>Projected-Route (P)</td>

          <td align='left'>This document</td></tr>
    </tbody>
        </table>
   </section><!-- New Subregistry For The RPL Option Flags -->

   <section anchor='RPLCtrlMsgReg'><name>New RPL Control Codes</name>

    <t>This document extends the IANA Subregistry created by RFC 6550 for RPL
    Control Codes as indicated in <xref target="ianaRPLCtrlMsgtbl"/>:</t>


        <table anchor="ianaRPLCtrlMsgtbl"><name>New RPL Control Codes</name>
   <thead>
          <tr><th align='center'>Code</th>

          <th align='left'>Description</th>

          <th align='left'>Reference</th></tr>

   </thead><tbody>

          <tr><td align='center'>0x09</td>

          <td align='left'>Projected DAO Request (PDR)</td>

          <td align='left'>This document</td></tr>

          <tr><td align='center'>0x0A</td>

          <td align='left'>PDR-ACK</td>

          <td align='left'>This document</td></tr>
   </tbody>
        </table>


   </section> <!-- "New RPL Control Codes" -->

   <section anchor='RPLCtrlMsgOptionsReg'><name>New RPL Control Message Options</name>

    <t>This document extends the IANA Subregistry created by RFC 6550 for
    RPL Control Message Options as indicated in <xref target="ianaRPLCtrlMsgopttbl"/>:</t>



        <table anchor="ianaRPLCtrlMsgopttbl"><name>RPL Control Message Options</name>
   <thead>
          <tr><th align='center'>Value</th>

          <th align='left'>Meaning</th>

          <th align='left'>Reference</th></tr>

   </thead><tbody>

          <tr><td align='center'>0x0B</td>

          <td align='left'>Stateful VIO (SF-VIO)</td>

          <td align='left'>This document</td></tr>

          <tr><td align='center'>0x0C</td>

          <td align='left'>Source-Routed VIO (SR-VIO)</td>

          <td align='left'>This document</td></tr>

          <tr><td align='center'>0x0D</td>

          <td align='left'>Sibling Information option</td>

          <td align='left'>This document</td></tr>
   </tbody>
        </table>

   </section> <!-- "RPL Control Message Options" -->

<!--


   <section anchor='IANAMop'>
   <name>Updating Registry for the RPL Mode of Operation</name>
    <t>This document is updating the registry created by RFC 6550 for the RPL
        3-bit Mode of Operation (MOP) as follows:
        </t>

        <table anchor="ianaMOPtbl"><name>DIO Mode of operation</name>
   <thead>

          <tr><th align='center'>MOP value</th>

          <th align='left'>Description</th>

          <th align='left'>Reference</th></tr>

   </thead><tbody>

          <tr><td align='center'>5</td>

          <td align='left'>Non-Storing Mode of operation with Projected Routes</td>

          <td align='left'>This document</td></tr>

          <tr><td align='center'>6</td>

          <td align='left'>Storing Mode of operation with Projected Routes</td>

          <td align='left'>This document</td></tr>
    </tbody>
        </table>

   </section> < Updating Registry for the RPL Mode of Operation >
        -->



   <section anchor='RPLPDRflagReg'>
   <name>SubRegistry for the Projected DAO Request Flags</name>

   <t>
   IANA is required to create a registry for the 8-bit Projected DAO Request
   (PDR) Flags field. Each bit is tracked with the following qualities:
   </t>
   <ul>
     <li>Bit number (counting from bit 0 as the most significant bit)</li>
     <li>Capability description</li>
     <li>Reference</li>
   </ul>

 <t> Registration procedure is "Standards Action" <xref target='RFC8126'/>. The initial allocation is as indicated in <xref target='RPLPDRflagRegtbl'/>:
 </t>

        <table anchor="RPLPDRflagRegtbl"><name>Initial PDR Flags</name>
   <thead>

          <tr><th align='center'>Bit number</th>

          <th align='left'>Capability description</th>

          <th align='left'>Reference</th></tr>

   </thead><tbody>

          <tr><td align='center'>0</td>

          <td align='left'>PDR-ACK request (K)</td>

          <td align='left'>This document</td></tr>

          <tr><td align='center'>1</td>

          <td align='left'>Requested path should be redundant (R)</td>

          <td align='left'>This document</td></tr>
    </tbody>
        </table>

   </section> <!-- SubRegistry for the Projected DAO Request Flags -->


   <section anchor='RPLPDRackflagReg'>
   <name>SubRegistry for the PDR-ACK Flags</name>

   <t>
   IANA is required to create an subregistry for the 8-bit PDR-ACK Flags field.
   Each bit is tracked with the following qualities:
   </t>
   <ul>
     <li>Bit number (counting from bit 0 as the most significant bit)</li>
     <li>Capability description</li>
     <li>Reference</li>
   </ul>

 <t>Registration procedure is "Standards Action" <xref target='RFC8126'/>.
    No bit is currently defined for the PDR-ACK Flags.
   </t>

   </section> <!-- SubRegistry for the PDR-ACK Flags -->



<section anchor='iana-stats-nonrej'>
<name>Subregistry for the PDR-ACK Acceptance Status Values </name>
 <t>
	IANA is requested to create a Subregistry for the PDR-ACK Acceptance
    Status values.
</t>
<ul spacing='normal'>
  <li> Possible values are 6-bit unsigned integers (0..63).</li>
  <li> Registration procedure is "Standards Action" <xref target='RFC8126'/>.</li>
  <li> Initial allocation is as indicated in <xref target='iana-ack-status'/>:</li>
</ul>




   <table anchor='iana-ack-status'><name>Acceptance values of the PDR-ACK Status</name>
   <thead>
      <tr><td>Value</td><td>Meaning</td><td>Reference</td></tr>
   </thead><tbody>
      <tr><td>0</td><td>Unqualified acceptance</td><td>This document</td></tr>
   </tbody>

   </table>


</section><!-- Subregistry for the PDR-ACK Acceptance Status Values -->


<section anchor='iana-stats-rej'>
<name>Subregistry for the PDR-ACK Rejection Status Values</name>
 <t>
	IANA is requested to create a Subregistry for the PDR-ACK Rejection
    Status values.
</t>
<ul spacing='normal'>
  <li> Possible values are 6-bit unsigned integers (0..63).</li>
  <li> Registration procedure is "Standards Action" <xref target='RFC8126'/>.</li>
  <li> Initial allocation is as indicated in <xref target='iana-nack-status'/>:</li>
</ul>


   <table anchor='iana-nack-status'><name>Rejection values of the PDR-ACK Status</name>
   <thead>
      <tr><td>Value</td><td>Meaning</td><td>Reference</td></tr>
   </thead><tbody>
      <tr><td>0</td><td>Unqualified rejection</td><td>This document</td></tr>
   </tbody>

   </table>

</section><!-- Subregistry for the PDR-ACK Rejection Status Values -->



   <section anchor='RPLVIOflagReg'>
   <name>SubRegistry for the Via Information Options Flags</name>

   <t>
   IANA is requested to create a Subregistry for the 5-bit Via Information Options
   (Via Information Option) Flags field. Each bit is tracked with the following qualities:
   </t>
   <ul>
     <li>Bit number (counting from bit 0 as the most significant bit)</li>
     <li>Capability description</li>
     <li>Reference</li>
   </ul>

 <t> Registration procedure is "Standards Action" <xref target='RFC8126'/>.
   No bit is currently defined for the Via Information Options (Via Information Option) Flags.
   </t>

   </section> <!-- SubRegistry for the Via Information Options Flags -->


   <section anchor='RPLSIOflagReg'>
   <name>SubRegistry for the Sibling Information Option Flags</name>

   <t>
   IANA is required to create a registry for the 5-bit Sibling Information
   Option (SIO) Flags field. Each bit is tracked with the following qualities:
   </t>
   <ul>
     <li>Bit number (counting from bit 0 as the most significant bit)</li>
     <li>Capability description</li>
     <li>Reference</li>
   </ul>

 <t> Registration procedure is "Standards Action" <xref target='RFC8126'/>. The initial allocation is as indicated in <xref target='RPLSIORegtbl'/>:
 </t>

        <table anchor="RPLSIORegtbl"><name>Initial SIO Flags</name>
   <thead>

          <tr><th align='center'>Bit number</th>

          <th align='left'>Capability description</th>

          <th align='left'>Reference</th></tr>

   </thead><tbody>

          <tr><td align='center'>0</td>

          <td align='left'>Connectivity is bidirectional (B)</td>

          <td align='left'>This document</td></tr>

    </tbody>
        </table>

   </section> <!-- SubRegistry for the Sibling Information Option Flags -->




<section anchor="iana-P-DAO"><name>New Destination Advertisement Object Flag</name>


<t>
   This document modifies the "Destination Advertisement Object (DAO) Flags"
   registry initially
   created in Section 20.11 of <xref target='RFC6550'/> .
</t><t>
  <xref target='extP-DAO'/> also defines one new entry in the Registry as follows:
    </t>

   <table  anchor="iana-P-DAOtbl">
      <name>New Destination Advertisement Object (DAO) Flag</name>
   <thead>
      <tr><td>Bit Number</td><td>Capability Description</td><td>Reference</td></tr>
   </thead><tbody>
      <tr><td>2 (suggested)</td><td>Projected DAO (P)</td><td>THIS RFC</td></tr>
   </tbody>
   </table>

   </section>



   <section anchor='ICMPv6ErrPRoute'>
        <name>Error in Projected Route ICMPv6 Code</name>
        <t>In some cases RPL will return an ICMPv6 error message when a
        message cannot be forwarded along a Projected Route.
        This ICMPv6 error message is "Error in Projected Route".</t>

        <t>IANA has defined an ICMPv6 "Code" Fields Registry for ICMPv6
        Message Types. ICMPv6 Message Type 1 describes "Destination Unreachable"
        codes. This specification requires that a new code is allocated from the
        ICMPv6 Code Fields Registry for ICMPv6 Message Type 1, for "Error in
        Projected Route", with a suggested code value of 8, to be confirmed by
        IANA.</t>
   </section> <!--"ICMPv6: Error in a Projected Route" -->
</section> <!-- "IANA Considerations"-->


<section><name>Acknowledgments</name>
<t>The authors wish to acknowledge JP Vasseur, Remy Liubing, James Pylakutty and
   Patrick Wetterwald for their contributions to the ideas developed here.</t>
</section>

    </middle>
    <back>

   <displayreference   target="RFC9008"     to="USEofRPLinfo"/>
   <displayreference   target="RFC6550"        to="RPL"/>
   <displayreference   target="I-D.pthubert-raw-architecture"   to="RAW-ARCHI"/>
   <displayreference   target="RFC9030"    to="6TiSCH-ARCHI"/>
   <displayreference   target="RFC9035" to="TURN-ON_RFC8138"/>

    <references><name>Normative References</name>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4443.xml'/>
	 <!--
     <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4919.xml'/>
     -->
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6282.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6550.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6553.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6554.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml'/>

    </references><references><name>Informative References</name>

	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7102.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6997.xml'/>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7416.xml'/>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.9030.xml'/>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.pthubert-raw-architecture.xml'/>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.9035.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8655.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8025.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8138.xml'/>

	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8505.xml'/>
	  <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.9008.xml'/>

      <reference anchor='PCE' target='https://datatracker.ietf.org/doc/charter-ietf-pce/'>
         <front>
            <title>Path Computation Element</title>
            <author>
               <organization>IETF</organization>
            </author>
            <date/>
         </front>
      </reference>

    </references>

	<section><name>Applications</name>

       <section anchor='loose'><name>Loose Source Routing</name>


	  <t>A RPL implementation operating in a very constrained LLN typically uses
      the Non-Storing Mode of Operation as represented in <xref target='nost'/>.
      In that mode, a RPL node indicates a
      parent-child relationship to the Root, using a Destination Advertisement
      Object (DAO) that is unicast from the node directly to the Root,
      and the Root typically builds a source routed path to a destination down
      the DODAG by recursively concatenating this information.
      </t>

          <figure anchor='nost'><name>RPL Non-Storing Mode of operation </name>
            <artwork>
           ------+---------
                 |          Internet
                 |
              +-----+
              |     | Border Router
              |     |  (RPL Root)
              +-----+                      ^     |        |
                 |                         | DAO | ACK    |
           o    o   o    o                 |     |        | Strict
       o o   o  o   o  o  o o   o          |     |        | Source
      o  o o  o o    o   o   o  o  o       |     |        | Route
      o   o    o  o     o  o    o  o  o    |     |        |
     o  o   o  o   o         o   o o       |     v        v
     o          o             o     o
                       LLN
                       </artwork>
          </figure>
    <t>
      Based on the parent-children relationships expressed in the non-storing
      DAO messages,the Root possesses topological information about the whole
      network, though this information is limited to the structure of the DODAG
      for which it is the destination.
      A packet that is generated within the domain will always reach the Root,
      which can then apply a source routing information to reach the destination
      if the destination is also in the DODAG.
      Similarly, a packet coming from the outside of the domain for a destination
      that is expected to be in a RPL domain reaches the Root.
    </t>
    <t>
     It results that the Root, or then some associated centralized computation
     engine such as a PCE, can determine the amount of packets that reach a
     destination in the
     RPL domain, and thus the amount of energy and bandwidth that is wasted for
     transmission, between itself and the destination, as well as the risk of
     fragmentation, any potential delays because of a paths longer than
     necessary (shorter paths exist that would not traverse the Root).
    </t>
     <t>
     As a network gets deep, the size of the source routing header that the
      Root must add to all the downward packets becomes an issue for nodes that
      are many hops away. In some use cases, a RPL network forms long lines and
      a limited amount of well-Targeted routing state would allow to make the
      source routing operation loose as opposed to strict, and save packet size.
      Limiting the packet size is directly beneficial to the energy budget, but,
      mostly, it reduces the chances of frame loss and/or packet fragmentation,
      which is highly detrimental to the LLN operation. Because the capability
      to store a routing state in every node is limited, the decision of which
      route is installed where can only be optimized with a global knowledge of
      the system, a knowledge that the Root or an associated PCE may possess by
      means that are outside of the scope of this specification.
      </t>

      <t>
      This specification enables to store a Storing Mode state in
      intermediate routers, which enables to limit the excursion of the source
      route headers in deep networks.
      Once a P-DAO exchange has taken place for a given Target, if the Root
      operates in non Storing Mode, then it may elide the sequence of routers
      that is installed in the network from its source route headers to
      destination that are reachable via that Target, and the source route
      headers effectively become loose.
      </t>

      </section> <!-- Loose Source Routing -->
    <section><name>Transversal Routes</name>

      <t>
      RPL is optimized for Point-to-Multipoint (P2MP) and Multipoint-to-Point
      (MP2P), whereby routes are always installed along the RPL DODAG
      respectively from and towards the DODAG Root. Transversal
      Peer to Peer (P2P) routes in a RPL network will generally suffer from some
      elongated (stretched) path versus the best possible path, since routing
      between 2 nodes always happens via a common parent, as illustrated in
      <xref target='stretch'/>:
        </t><ul spacing='normal'>
        <li>In Storing Mode, unless the destination is a child of the source,
     the packets will follow the default route up the DODAG as well.
     If the destination is in the same DODAG, they will eventually reach a
     common parent that has a route to the destination; at worse, the common
     parent may also be the Root. From that common parent, the packet will
     follow a path down the DODAG that is optimized for the Objective Function
     that was used to build the DODAG.</li>
        <li> in Non-Storing Mode, all packets
     routed within the DODAG flow all the way up to the Root of the DODAG. If
     the destination is in the same DODAG, the Root must encapsulate the packet
     to place an RH that has the strict source route information down
     the DODAG to the destination. This will be the case even if the destination
     is relatively close to the source and the Root is relatively far off.
        </li>
        </ul><t>
     </t>


       <figure anchor='stretch'><name>Routing Stretch between S and D via common parent X</name>
            <artwork>
                   ------+---------
                    |          Internet
                    |
                 +-----+
                 |     | Border Router
                 |     |  (RPL Root)
                 +-----+
                    X
              ^    v   o    o
          ^ o   o  v   o  o  o o   o
         ^  o o  o v    o   o   o  o  o
         ^   o    o  v     o  o    o  o  o
        S  o   o  o   D         o   o o
        o          o             o     o
                          LLN
       </artwork>
          </figure>



     <t>
     It results that it is often beneficial to enable transversal P2P routes,
     either if the RPL route presents a stretch from shortest path, or if the
     new route is engineered with a different objective, and that it is
     even more critical in Non-Storing Mode than it is in Storing Mode, because
     the routing stretch is wider.
     For that reason, earlier work at the IETF introduced the
     <xref target='RFC6997'>"Reactive Discovery of Point-to-Point Routes in
     Low Power and Lossy Networks"</xref>, which specifies a distributed method for
     establishing optimized P2P routes. This draft proposes an alternate based
     on a centralized route computation.
     </t>

        <figure anchor='opti2'><name>Projected Transversal Route</name>
            <artwork>
              ------+---------
                    |          Internet
                    |
                 +-----+
                 |     | Border Router
                 |     |  (RPL Root)
                 +-----+
                    |
              o    o   o    o
          o o   o  o   o  o  o o   o
         o  o o  o o    o   o   o  o  o
         o   o    o  o     o  o    o  o  o
        S>>A>>>B>>C>>>D         o   o o
        o          o             o     o
                          LLN
       </artwork>
          </figure>
            <t>
      This specification enables to store source-routed or Storing Mode state in
      intermediate routers, which enables to limit the stretch of a P2P route
      and maintain the characteristics within a given SLA. An example of service
      using this mechanism oculd be a control loop that would be installed in a
      network that uses classical RPL for asynchronous data collection. In that
      case, the P2P path may be installed in a different RPL Instance, with a
      different objective function.
      </t>
      </section>
      </section>

    </back>




</rfc>
